#!/bin/bash
# formio-bootstrap.sh - Programmatic Form.io setup for E2E tests
#
# This script automates the complete setup of a Form.io test environment:
# - Authenticates with Form.io server
# - Creates test project
# - Creates file upload form with TUS configuration
# - Saves credentials and IDs to .env.test

set -e  # Exit on error
set -o pipefail  # Fail on pipe errors

# Configuration with defaults
FORMIO_URL="${FORMIO_URL:-http://localhost:3001}"
ROOT_EMAIL="${ROOT_EMAIL:-test-admin@test.local}"
ROOT_PASSWORD="${ROOT_PASSWORD:-TestPass123!}"
TUS_ENDPOINT="${TUS_ENDPOINT:-http://localhost:1080/files/}"
ENV_FILE="${ENV_FILE:-.env.test}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
  echo -e "${BLUE}ℹ${NC} $1"
}

log_success() {
  echo -e "${GREEN}✅${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
  echo -e "${RED}❌${NC} $1"
}

# Verify required tools
check_dependencies() {
  local missing_deps=()

  if ! command -v curl &> /dev/null; then
    missing_deps+=("curl")
  fi

  if ! command -v jq &> /dev/null; then
    missing_deps+=("jq")
  fi

  if [ ${#missing_deps[@]} -ne 0 ]; then
    log_error "Missing required dependencies: ${missing_deps[*]}"
    log_info "Install with: brew install ${missing_deps[*]}"
    exit 1
  fi
}

# Wait for Form.io server to be ready
wait_for_formio() {
  log_info "Waiting for Form.io server at $FORMIO_URL..."

  local max_attempts=30
  local attempt=1

  while [ $attempt -le $max_attempts ]; do
    if curl -s -f "$FORMIO_URL/health" &> /dev/null || curl -s -f "$FORMIO_URL/" &> /dev/null; then
      log_success "Form.io server is ready"
      return 0
    fi

    log_warning "Attempt $attempt/$max_attempts: Form.io not ready yet..."
    sleep 2
    ((attempt++))
  done

  log_error "Form.io server did not become ready after $max_attempts attempts"
  exit 1
}

# Authenticate with Form.io
authenticate() {
  log_info "Authenticating with Form.io as $ROOT_EMAIL..."

  # Try login request with -i to get headers
  local login_response
  login_response=$(curl -i -s -X POST "$FORMIO_URL/user/login" \
    -H "Content-Type: application/json" \
    -d "{\"data\":{\"email\":\"$ROOT_EMAIL\",\"password\":\"$ROOT_PASSWORD\"}}")

  # Extract HTTP status from headers
  local http_code=$(echo "$login_response" | grep -i "^HTTP" | tail -1 | awk '{print $2}')

  if [ "$http_code" != "200" ]; then
    log_error "Login failed with HTTP $http_code"
    log_error "Response: $(echo "$login_response" | tail -1)"

    # Try alternative login endpoint
    log_warning "Trying alternative login endpoint..."
    login_response=$(curl -i -s -X POST "$FORMIO_URL/admin/login" \
      -H "Content-Type: application/json" \
      -d "{\"data\":{\"email\":\"$ROOT_EMAIL\",\"password\":\"$ROOT_PASSWORD\"}}")

    http_code=$(echo "$login_response" | grep -i "^HTTP" | tail -1 | awk '{print $2}')

    if [ "$http_code" != "200" ]; then
      log_error "Alternative login also failed with HTTP $http_code"
      exit 1
    fi
  fi

  # Extract JWT token from x-jwt-token header
  JWT_TOKEN=$(echo "$login_response" | grep -i "^x-jwt-token:" | sed 's/^x-jwt-token: //i' | tr -d '\r\n ')

  if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" = "null" ]; then
    log_error "Failed to extract JWT token from x-jwt-token header"
    log_error "Response headers: $(echo "$login_response" | grep -i "^x-jwt-token:" || echo "No x-jwt-token header")"
    exit 1
  fi

  log_success "Authenticated successfully. Token: ${JWT_TOKEN:0:20}..."

  # Create or update .env.test file
  if [ -f "$ENV_FILE" ]; then
    log_warning "Backing up existing $ENV_FILE to ${ENV_FILE}.backup"
    cp "$ENV_FILE" "${ENV_FILE}.backup"
  fi

  cat > "$ENV_FILE" << EOF
# Form.io Test Environment Configuration
# Generated by formio-bootstrap.sh on $(date)

# Application URLs
TEST_BASE_URL=http://localhost:64849
FORMIO_BASE_URL=$FORMIO_URL
GCS_BASE_URL=http://localhost:4443

# Form.io Authentication
FORMIO_JWT_TOKEN=$JWT_TOKEN
FORMIO_ROOT_EMAIL=$ROOT_EMAIL

EOF

  log_success "Environment file created: $ENV_FILE"
}

# Create test project
create_project() {
  log_info "Creating test project..."

  local project_name="e2e-test-$(date +%s)"
  local project_response
  project_response=$(curl -s -w "\n%{http_code}" -X POST "$FORMIO_URL/project" \
    -H "Content-Type: application/json" \
    -H "x-jwt-token: $JWT_TOKEN" \
    -d "{
      \"title\": \"E2E Test Project\",
      \"name\": \"$project_name\",
      \"description\": \"Automated testing project created by formio-bootstrap.sh\"
    }")

  local http_code=$(echo "$project_response" | tail -n1)
  local response_body=$(echo "$project_response" | sed '$d')

  if [ "$http_code" != "201" ] && [ "$http_code" != "200" ]; then
    log_warning "Project creation returned HTTP $http_code (may already exist)"
    log_info "Response: $response_body"
  else
    PROJECT_ID=$(echo "$response_body" | jq -r '._id // .id // empty')

    if [ -n "$PROJECT_ID" ] && [ "$PROJECT_ID" != "null" ]; then
      echo "FORMIO_PROJECT_ID=$PROJECT_ID" >> "$ENV_FILE"
      log_success "Project created with ID: $PROJECT_ID"
    else
      log_warning "Project created but ID not found in response"
    fi
  fi
}

# Create file upload form
create_upload_form() {
  log_info "Creating file upload form with TUS configuration..."

  local form_response
  form_response=$(curl -s -w "\n%{http_code}" -X POST "$FORMIO_URL/form" \
    -H "Content-Type: application/json" \
    -H "x-jwt-token: $JWT_TOKEN" \
    -d '{
      "title": "Test File Upload Form",
      "name": "testfileupload",
      "path": "testfileupload",
      "type": "form",
      "display": "form",
      "tags": ["test", "upload", "e2e"],
      "components": [
        {
          "type": "textfield",
          "key": "title",
          "label": "Title",
          "placeholder": "Enter a title for your upload",
          "input": true,
          "validate": {
            "required": true
          }
        },
        {
          "type": "file",
          "key": "attachment",
          "label": "Upload File",
          "storage": "url",
          "url": "'"$TUS_ENDPOINT"'",
          "options": {
            "withCredentials": false
          },
          "filePattern": "*",
          "fileMinSize": "0KB",
          "fileMaxSize": "100MB",
          "uploadOnly": false,
          "input": true,
          "validate": {
            "required": true
          }
        },
        {
          "type": "textarea",
          "key": "description",
          "label": "Description",
          "placeholder": "Optional description",
          "input": true,
          "rows": 3
        },
        {
          "type": "button",
          "action": "submit",
          "label": "Submit",
          "theme": "primary",
          "disableOnInvalid": true
        }
      ]
    }')

  local http_code=$(echo "$form_response" | tail -n1)
  local response_body=$(echo "$form_response" | sed '$d')

  if [ "$http_code" != "201" ] && [ "$http_code" != "200" ]; then
    log_error "Form creation failed with HTTP $http_code"
    log_error "Response: $response_body"
    exit 1
  fi

  FORM_ID=$(echo "$response_body" | jq -r '._id // .id // empty')

  if [ -z "$FORM_ID" ] || [ "$FORM_ID" = "null" ]; then
    log_error "Failed to extract form ID from response"
    log_error "Response: $response_body"
    exit 1
  fi

  cat >> "$ENV_FILE" << EOF

# Form.io Form Configuration
FORMIO_FORM_ID=$FORM_ID
TEST_FORM_PATH=testfileupload

# TUS Upload Configuration
TUS_ENDPOINT=$TUS_ENDPOINT

# Test Configuration
TEST_TIMEOUT=120000
UPLOAD_TIMEOUT=180000

EOF

  log_success "Form created with ID: $FORM_ID"
}

# Verify setup
verify_setup() {
  log_info "Verifying Form.io setup..."

  # Verify form is accessible
  local form_check
  form_check=$(curl -s -w "%{http_code}" -o /dev/null "$FORMIO_URL/form/$FORM_ID")

  if [ "$form_check" = "200" ]; then
    log_success "Form is accessible at: $FORMIO_URL/form/$FORM_ID"
  else
    log_warning "Form verification returned HTTP $form_check"
  fi

  # Print summary
  echo ""
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  log_success "Form.io Bootstrap Complete!"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""
  echo "Configuration saved to: $ENV_FILE"
  echo ""
  echo "Environment Variables:"
  echo "  FORMIO_URL:       $FORMIO_URL"
  echo "  JWT Token:        ${JWT_TOKEN:0:30}..."
  [ -n "$PROJECT_ID" ] && echo "  Project ID:       $PROJECT_ID"
  echo "  Form ID:          $FORM_ID"
  echo "  TUS Endpoint:     $TUS_ENDPOINT"
  echo ""
  echo "Form URL: $FORMIO_URL/form/$FORM_ID"
  echo ""
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Main execution
main() {
  log_info "Starting Form.io bootstrap process..."

  check_dependencies
  wait_for_formio
  authenticate
  create_project
  create_upload_form
  verify_setup

  log_success "All operations completed successfully!"
  exit 0
}

# Run main function
main "$@"
