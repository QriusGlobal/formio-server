name: E2E Testing Pipeline

on:
  push:
    branches: [main, master, develop, feature/file-upload]
    paths:
      - 'formio/**'
      - 'formio-core/**'
      - 'formio-react/**'
      - 'test-app/**'
      - '.github/workflows/e2e-tests.yml'
      - 'docker-compose.*.yml'
      - 'Makefile.*'
  pull_request:
    branches: [main, master, develop]
    paths:
      - 'formio/**'
      - 'formio-core/**'
      - 'formio-react/**'
      - 'test-app/**'

env:
  NODE_VERSION: '18'
  MONGO_VERSION: '6'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: E2E Tests - Full Suite
  e2e-full-suite:
    name: E2E Tests - Full Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: test-app/package-lock.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Start test services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          echo "Waiting for services to be healthy..."
          sleep 30

      - name: Wait for MongoDB
        run: |
          timeout 60 bash -c 'until docker exec formio-mongo-test mongosh --eval "db.adminCommand({ ping: 1 })" 2>/dev/null; do sleep 2; done'
          echo "✅ MongoDB is ready"

      - name: Initialize GCS emulator
        run: |
          curl -X POST http://localhost:4443/storage/v1/b \
            -H "Content-Type: application/json" \
            -d '{"name":"test-formio-uploads"}' || true
          curl -s http://localhost:4443/storage/v1/b/test-formio-uploads
          echo "✅ GCS emulator initialized"

      - name: Wait for Form.io Server
        run: |
          timeout 120 bash -c 'until curl -sf http://localhost:3001/health; do sleep 3; done'
          echo "✅ Form.io server is ready"

      - name: Verify all services
        run: |
          echo "Checking service health..."
          docker-compose -f docker-compose.test.yml ps
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:4443/storage/v1/b || exit 1
          curl -f http://localhost:1080/ || exit 1
          echo "✅ All services are healthy"

      - name: Install test app dependencies
        run: |
          cd test-app
          npm ci

      - name: Install Playwright browsers
        run: |
          cd test-app
          npx playwright install --with-deps chromium firefox webkit

      - name: Build packages
        run: |
          cd formio-core && npm ci && npm run build
          cd ../formio-react && npm ci && npm run build
          cd ../test-app && npm run build

      - name: Run E2E tests
        run: |
          cd test-app
          npm run test:e2e
        env:
          CI: true
          FORMIO_URL: http://localhost:3001
          TEST_APP_URL: http://localhost:64849

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-app/test-results/
            test-app/playwright-report/
          retention-days: 30

      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: test-app/playwright-report/
          retention-days: 30

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: failure-screenshots
          path: test-app/test-results/**/screenshots/
          retention-days: 7

      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: failure-videos
          path: test-app/test-results/**/videos/
          retention-days: 7

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Form.io Server Logs ==="
          docker logs formio-server-test
          echo "=== MongoDB Logs ==="
          docker logs formio-mongo-test
          echo "=== GCS Emulator Logs ==="
          docker logs formio-gcs-test
          echo "=== TUS Server Logs ==="
          docker logs formio-tus-test || echo "TUS not running"

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v
          docker system prune -f

  # Job 2: E2E Tests - TUS Upload Specific
  e2e-tus-tests:
    name: E2E Tests - TUS Upload
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: test-app/package-lock.json

      - name: Start test services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Install dependencies and Playwright
        run: |
          cd test-app
          npm ci
          npx playwright install --with-deps chromium

      - name: Run TUS-specific tests
        run: |
          cd test-app
          npm run test:e2e:tus
        env:
          CI: true
          FORMIO_URL: http://localhost:3001

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tus-test-results
          path: test-app/test-results/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Job 3: E2E Tests - Uppy Integration
  e2e-uppy-tests:
    name: E2E Tests - Uppy Integration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: test-app/package-lock.json

      - name: Start test services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Install dependencies and Playwright
        run: |
          cd test-app
          npm ci
          npx playwright install --with-deps chromium

      - name: Run Uppy-specific tests
        run: |
          cd test-app
          npm run test:e2e:uppy
        env:
          CI: true
          FORMIO_URL: http://localhost:3001

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: uppy-test-results
          path: test-app/test-results/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Job 4: E2E Tests - Edge Cases
  e2e-edge-cases:
    name: E2E Tests - Edge Cases
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: test-app/package-lock.json

      - name: Start test services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Install dependencies and Playwright
        run: |
          cd test-app
          npm ci
          npx playwright install --with-deps chromium

      - name: Run edge case tests
        run: |
          cd test-app
          npm run test:e2e:edge
        env:
          CI: true
          FORMIO_URL: http://localhost:3001

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: edge-case-test-results
          path: test-app/test-results/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Job 5: Visual Regression Tests
  e2e-visual-regression:
    name: E2E Tests - Visual Regression
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: test-app/package-lock.json

      - name: Start test services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Install dependencies and Playwright
        run: |
          cd test-app
          npm ci
          npx playwright install --with-deps chromium

      - name: Run visual regression tests
        run: |
          cd test-app
          npm run test:e2e:visual
        env:
          CI: true
          FORMIO_URL: http://localhost:3001

      - name: Upload visual diffs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-regression-diffs
          path: test-app/test-results/**/diff-*.png
          retention-days: 30

      - name: Upload baseline screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-baselines
          path: test-app/e2e/screenshots/
          retention-days: 30

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Job 6: Cross-Browser Testing
  e2e-cross-browser:
    name: E2E Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: test-app/package-lock.json

      - name: Start test services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Install dependencies and Playwright
        run: |
          cd test-app
          npm ci
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E tests on ${{ matrix.browser }}
        run: |
          cd test-app
          npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          FORMIO_URL: http://localhost:3001

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: test-app/test-results/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Job 7: Comment PR with Test Results
  pr-comment:
    name: Comment PR with Test Results
    runs-on: ubuntu-latest
    needs: [e2e-full-suite, e2e-tus-tests, e2e-uppy-tests, e2e-edge-cases, e2e-visual-regression]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Generate test summary
        id: test-summary
        run: |
          echo "## 🎭 E2E Test Results" > summary.md
          echo "" >> summary.md
          echo "| Test Suite | Status |" >> summary.md
          echo "|------------|--------|" >> summary.md
          echo "| Full Suite | ${{ needs.e2e-full-suite.result }} |" >> summary.md
          echo "| TUS Upload | ${{ needs.e2e-tus-tests.result }} |" >> summary.md
          echo "| Uppy Integration | ${{ needs.e2e-uppy-tests.result }} |" >> summary.md
          echo "| Edge Cases | ${{ needs.e2e-edge-cases.result }} |" >> summary.md
          echo "| Visual Regression | ${{ needs.e2e-visual-regression.result }} |" >> summary.md
          echo "" >> summary.md
          echo "### 📊 Artifacts" >> summary.md
          echo "- [Full Test Report](../actions/runs/${{ github.run_id }})" >> summary.md
          echo "- [Playwright HTML Report](../actions/runs/${{ github.run_id }})" >> summary.md
          if [ "${{ needs.e2e-visual-regression.result }}" = "failure" ]; then
            echo "- ⚠️ [Visual Regression Diffs Available](../actions/runs/${{ github.run_id }})" >> summary.md
          fi

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job 8: E2E Test Summary
  e2e-test-summary:
    name: E2E Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-full-suite, e2e-tus-tests, e2e-uppy-tests, e2e-edge-cases, e2e-visual-regression, e2e-cross-browser]
    if: always()
    steps:
      - name: Generate GitHub summary
        run: |
          echo "# 🎭 E2E Testing Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Full Suite | ${{ needs.e2e-full-suite.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TUS Upload | ${{ needs.e2e-tus-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Uppy Integration | ${{ needs.e2e-uppy-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Edge Cases | ${{ needs.e2e-edge-cases.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Regression | ${{ needs.e2e-visual-regression.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cross-Browser | ${{ needs.e2e-cross-browser.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Test Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Test results and screenshots are available in the artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "- Playwright HTML reports can be downloaded and viewed locally" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.e2e-full-suite.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-tus-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-uppy-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-edge-cases.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-visual-regression.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-cross-browser.result }}" == "failure" ]]; then
            echo "## ⚠️ Test Failures Detected" >> $GITHUB_STEP_SUMMARY
            echo "Please review the test logs and artifacts for details." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ✅ All E2E Tests Passed" >> $GITHUB_STEP_SUMMARY
            echo "All test suites completed successfully!" >> $GITHUB_STEP_SUMMARY
          fi