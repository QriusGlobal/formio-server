Multiple projects found, consider using a single `tsconfig` with `references` to speed up, or use `noWarnOnMultipleProjects` to suppress this warning
[{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/async/AsyncFileProcessor.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UploadFile' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'UploadFile' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"UploadFile"},"fix":{"range":[177,188],"text":""},"desc":"Remove unused variable 'UploadFile'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UploadStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'UploadStatus' is defined but never used.","line":8,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"UploadStatus"},"fix":{"range":[187,201],"text":""},"desc":"Remove unused variable 'UploadStatus'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'metadata' should be typed with a non-any type.","line":55,"column":5,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":55,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":67,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":67,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1714,1716],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":68,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":68,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1756,1758],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":74,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":74,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1885,1887],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":95,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":95,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2458,2460],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":113,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":113,"endColumn":31},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":130,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":130,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3399,3401],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":135,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":135,"endColumn":21},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":157,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":157,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3996,3998],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":175,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":175,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4396,4398],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":219,"column":34,"nodeType":"NewExpression","endLine":219,"endColumn":72},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":285,"column":64,"nodeType":"MemberExpression","endLine":285,"endColumn":76},{"ruleId":"unicorn/prefer-add-event-listener","severity":2,"message":"Prefer `addEventListener` over `onerror`. Note that there is difference between `{window,element}.onerror` and `{window,element}.addEventListener('error')`.","line":292,"column":14,"nodeType":"Identifier","messageId":"prefer-add-event-listener","endLine":292,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":312,"column":34,"nodeType":"MemberExpression","endLine":312,"endColumn":50}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Async File Processor\n *\n * Non-blocking file processing using BullMQ job queue\n * Replaces synchronous file validation and processing with async operations\n */\n\nimport { UploadFile, UploadStatus } from '../types';\nimport { logger } from '../utils/logger';\n\n/**\n * Job status from BullMQ API\n */\nexport interface JobStatus {\n  jobId: string;\n  status: 'waiting' | 'active' | 'completed' | 'failed' | 'delayed' | 'paused';\n  progress: number;\n  templateType?: string;\n  result?: {\n    filename: string;\n    size: number;\n    path: string;\n    processingTime: number;\n  };\n  error?: {\n    message: string;\n    code: string;\n  };\n}\n\n/**\n * Async File Processor Class\n * Handles non-blocking file operations via BullMQ job queue\n */\nexport class AsyncFileProcessor {\n  private apiBaseUrl: string;\n  private pollingInterval: number;\n\n  constructor(apiBaseUrl: string = '/api/file-generation', pollingInterval: number = 1000) {\n    this.apiBaseUrl = apiBaseUrl;\n    this.pollingInterval = pollingInterval;\n  }\n\n  /**\n   * Submit file generation job to queue\n   *\n   * @param templateType - Type of file to generate (pdf, csv, json, html)\n   * @param metadata - Data for file generation\n   * @param formId - Form ID for context\n   * @param submissionId - Submission ID for context\n   * @returns Job ID for tracking\n   */\n  async submitFileGenerationJob(\n    templateType: string,\n    metadata: any,\n    formId?: string,\n    submissionId?: string\n  ): Promise<string> {\n    const response = await fetch(`${this.apiBaseUrl}/jobs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        templateType,\n        metadata,\n        formId: formId || '',\n        submissionId: submissionId || '',\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to submit file generation job');\n    }\n\n    const result = await response.json();\n    return result.jobId;\n  }\n\n  /**\n   * Get job status\n   *\n   * @param jobId - Job ID from submitFileGenerationJob\n   * @returns Job status and progress\n   */\n  async getJobStatus(jobId: string): Promise<JobStatus> {\n    const response = await fetch(`${this.apiBaseUrl}/jobs/${jobId}`);\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error('Job not found');\n      }\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to get job status');\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Poll job status until completion\n   *\n   * @param jobId - Job ID to poll\n   * @param onProgress - Progress callback (optional)\n   * @returns Final job result\n   */\n  async pollJobUntilComplete(\n    jobId: string,\n    onProgress?: (progress: number, status: string) => void\n  ): Promise<JobStatus> {\n    return new Promise((resolve, reject) => {\n      const poll = async () => {\n        try {\n          const status = await this.getJobStatus(jobId);\n\n          // Call progress callback\n          if (onProgress) {\n            onProgress(status.progress, status.status);\n          }\n\n          // Check if job is complete\n          if (status.status === 'completed') {\n            resolve(status);\n            return;\n          }\n\n          // Check if job failed\n          if (status.status === 'failed') {\n            reject(new Error(status.error?.message || 'Job failed'));\n            return;\n          }\n\n          // Continue polling\n          setTimeout(poll, this.pollingInterval);\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      // Start polling\n      poll();\n    });\n  }\n\n  /**\n   * Download generated file\n   *\n   * @param jobId - Job ID\n   * @returns Blob containing file data\n   */\n  async downloadFile(jobId: string): Promise<Blob> {\n    const response = await fetch(`${this.apiBaseUrl}/download/${jobId}`);\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to download file');\n    }\n\n    return response.blob();\n  }\n\n  /**\n   * Cancel a job\n   *\n   * @param jobId - Job ID to cancel\n   */\n  async cancelJob(jobId: string): Promise<void> {\n    const response = await fetch(`${this.apiBaseUrl}/jobs/${jobId}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Failed to cancel job');\n    }\n  }\n\n  /**\n   * Async file validation (non-blocking)\n   * Uses Web Workers API if available, falls back to async/await\n   *\n   * @param file - File to validate\n   * @param options - Validation options\n   * @returns Validation result\n   */\n  async validateFileAsync(\n    file: File,\n    options: {\n      maxSize?: number;\n      minSize?: number;\n      allowedTypes?: string[];\n      verifyMagicNumber?: boolean;\n    }\n  ): Promise<{ valid: boolean; error?: string }> {\n    // Size validation (synchronous, fast)\n    if (options.maxSize && file.size > options.maxSize) {\n      return {\n        valid: false,\n        error: `File size exceeds maximum allowed (${this.formatFileSize(options.maxSize)})`,\n      };\n    }\n\n    if (options.minSize && file.size < options.minSize) {\n      return {\n        valid: false,\n        error: `File size is below minimum required (${this.formatFileSize(options.minSize)})`,\n      };\n    }\n\n    // Type validation (synchronous, fast)\n    if (options.allowedTypes && options.allowedTypes.length > 0) {\n      const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\n      const isAllowed = options.allowedTypes.some((pattern) => {\n        if (pattern.startsWith('.')) {\n          return fileExt === pattern;\n        }\n        if (pattern.includes('/')) {\n          return file.type.match(new RegExp(pattern.replace('*', '.*')));\n        }\n        return false;\n      });\n\n      if (!isAllowed) {\n        return {\n          valid: false,\n          error: `File type not allowed. Allowed: ${options.allowedTypes.join(', ')}`,\n        };\n      }\n    }\n\n    // Magic number verification (async, heavy)\n    if (options.verifyMagicNumber) {\n      try {\n        const isValid = await this.verifyFileMagicNumber(file);\n        if (!isValid) {\n          return {\n            valid: false,\n            error: 'File content does not match declared type. This file may be dangerous.',\n          };\n        }\n      } catch (error) {\n        logger.warn('[AsyncFileProcessor] Magic number verification failed:', { error });\n        // Don't fail validation if magic number check errors\n      }\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Verify file magic number (async)\n   * Reads first few bytes to verify file type matches extension\n   *\n   * @param file - File to verify\n   * @returns True if file type is valid\n   */\n  private async verifyFileMagicNumber(file: File): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.addEventListener('load', (e) => {\n        try {\n          const arrayBuffer = e.target?.result as ArrayBuffer;\n          const bytes = new Uint8Array(arrayBuffer);\n\n          // Check magic numbers for common file types\n          const magicNumbers: Record<string, number[]> = {\n            'image/png': [0x89, 0x50, 0x4e, 0x47],\n            'image/jpeg': [0xff, 0xd8, 0xff],\n            'application/pdf': [0x25, 0x50, 0x44, 0x46], // %PDF\n            'application/zip': [0x50, 0x4b, 0x03, 0x04],\n            'image/gif': [0x47, 0x49, 0x46, 0x38],\n          };\n\n          const expectedMagic = magicNumbers[file.type];\n\n          if (!expectedMagic) {\n            // No magic number check for this type\n            resolve(true);\n            return;\n          }\n\n          // Verify magic number matches\n          const matches = expectedMagic.every((byte, index) => bytes[index] === byte);\n          resolve(matches);\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      reader.onerror = () => reject(new Error('Failed to read file'));\n\n      // Read first 16 bytes\n      reader.readAsArrayBuffer(file.slice(0, 16));\n    });\n  }\n\n  /**\n   * Format file size for display\n   */\n  private formatFileSize(bytes: number): string {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(2)} ${units[unitIndex]}`;\n  }\n}\n\n/**\n * Singleton instance for convenience\n */\nexport const asyncFileProcessor = new AsyncFileProcessor();\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/components/FileUploadProgress.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":35,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":29},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":41,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":41,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":96,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":96,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2536,2538],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":162,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":162,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4565,4567],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":210,"column":32,"nodeType":"MemberExpression","endLine":210,"endColumn":48}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * File Upload Progress Component\n *\n * React component for displaying async file generation progress\n * Shows real-time progress from BullMQ job queue\n */\n\nimport React, { useEffect, useState, useCallback } from 'react';\n\nimport { AsyncFileProcessor, type JobStatus } from '../async/AsyncFileProcessor';\n\ninterface FileUploadProgressProps {\n  jobId: string;\n  onComplete?: (result: JobStatus) => void;\n  onError?: (error: Error) => void;\n  onCancel?: () => void;\n  pollingInterval?: number;\n}\n\nexport const FileUploadProgress: React.FC<FileUploadProgressProps> = ({\n  jobId,\n  onComplete,\n  onError,\n  onCancel,\n  pollingInterval = 1000\n}) => {\n  const [status, setStatus] = useState<JobStatus | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [processor] = useState(() => new AsyncFileProcessor('/api/file-generation', pollingInterval));\n\n  // Poll job status\n  useEffect(() => {\n    let cancelled = false;\n\n    const poll = async () => {\n      try {\n        const result = await processor.pollJobUntilComplete(\n          jobId,\n          (progress, status) => {\n            if (!cancelled) {\n              setStatus(prev => ({ ...prev!, progress, status: status as any }));\n            }\n          }\n        );\n\n        if (!cancelled) {\n          setStatus(result);\n          if (onComplete) {\n            onComplete(result);\n          }\n        }\n      } catch (error_) {\n        if (!cancelled) {\n          const error = error_ instanceof Error ? error_ : new Error('Unknown error');\n          setError(error);\n          if (onError) {\n            onError(error);\n          }\n        }\n      }\n    };\n\n    // Start polling\n    poll();\n\n    // Cleanup on unmount\n    return () => {\n      cancelled = true;\n    };\n  }, [jobId, processor, onComplete, onError]);\n\n  // Handle cancel\n  const handleCancel = useCallback(async () => {\n    try {\n      await processor.cancelJob(jobId);\n      if (onCancel) {\n        onCancel();\n      }\n    } catch (error_) {\n      console.error('Failed to cancel job:', error_);\n      setError(error_ instanceof Error ? error_ : new Error('Failed to cancel job'));\n    }\n  }, [jobId, processor, onCancel]);\n\n  // Handle download\n  const handleDownload = useCallback(async () => {\n    if (status?.status !== 'completed') {\n      return;\n    }\n\n    try {\n      const blob = await processor.downloadFile(jobId);\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = status.result?.filename || 'download';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error_) {\n      console.error('Failed to download file:', error_);\n      setError(error_ instanceof Error ? error_ : new Error('Failed to download file'));\n    }\n  }, [status, jobId, processor]);\n\n  // Render error state\n  if (error) {\n    return (\n      <div className=\"file-upload-progress error\">\n        <div className=\"progress-icon\">❌</div>\n        <div className=\"progress-message\">\n          <strong>Error:</strong> {error.message}\n        </div>\n        <button onClick={() => setError(null)} className=\"btn-retry\">\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  // Render loading state\n  if (!status) {\n    return (\n      <div className=\"file-upload-progress loading\">\n        <div className=\"progress-spinner\" />\n        <div className=\"progress-message\">Initializing...</div>\n      </div>\n    );\n  }\n\n  // Render completed state\n  if (status.status === 'completed') {\n    return (\n      <div className=\"file-upload-progress completed\">\n        <div className=\"progress-icon\">✅</div>\n        <div className=\"progress-details\">\n          <div className=\"progress-message\">\n            <strong>Completed!</strong>\n          </div>\n          {status.result && (\n            <div className=\"file-info\">\n              <div>File: {status.result.filename}</div>\n              <div>Size: {formatFileSize(status.result.size)}</div>\n              <div>Processing time: {status.result.processingTime}ms</div>\n            </div>\n          )}\n        </div>\n        <button onClick={handleDownload} className=\"btn-download\">\n          Download\n        </button>\n      </div>\n    );\n  }\n\n  // Render failed state\n  if (status.status === 'failed') {\n    return (\n      <div className=\"file-upload-progress failed\">\n        <div className=\"progress-icon\">❌</div>\n        <div className=\"progress-message\">\n          <strong>Failed:</strong> {status.error?.message || 'Unknown error'}\n        </div>\n        <button onClick={() => window.location.reload()} className=\"btn-retry\">\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  // Render in-progress state\n  return (\n    <div className=\"file-upload-progress active\">\n      <div className=\"progress-header\">\n        <div className=\"progress-title\">\n          {status.status === 'waiting' ? 'Waiting in queue...' : 'Processing...'}\n        </div>\n        <div className=\"progress-percentage\">{status.progress}%</div>\n      </div>\n\n      <div className=\"progress-bar\">\n        <div\n          className=\"progress-bar-fill\"\n          style={{ width: `${status.progress}%` }}\n         />\n      </div>\n\n      <div className=\"progress-actions\">\n        <button onClick={handleCancel} className=\"btn-cancel\">\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Format file size helper\n */\nfunction formatFileSize(bytes: number): string {\n  const units = ['B', 'KB', 'MB', 'GB'];\n  let size = bytes;\n  let unitIndex = 0;\n\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n\n  return `${size.toFixed(2)} ${units[unitIndex]}`;\n}\n\n// Export CSS for component (should be imported by consuming app)\nexport const FileUploadProgressCSS = `\n.file-upload-progress {\n  padding: 20px;\n  border-radius: 8px;\n  background: #f8f9fa;\n  border: 1px solid #dee2e6;\n  margin: 10px 0;\n}\n\n.file-upload-progress.error,\n.file-upload-progress.failed {\n  background: #f8d7da;\n  border-color: #f5c6cb;\n  color: #721c24;\n}\n\n.file-upload-progress.completed {\n  background: #d4edda;\n  border-color: #c3e6cb;\n  color: #155724;\n}\n\n.progress-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.progress-title {\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.progress-percentage {\n  font-weight: 600;\n  font-size: 16px;\n  color: #007bff;\n}\n\n.progress-bar {\n  height: 8px;\n  background: #e9ecef;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 10px;\n}\n\n.progress-bar-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);\n  transition: width 0.3s ease;\n}\n\n.progress-icon {\n  font-size: 32px;\n  margin-bottom: 10px;\n}\n\n.progress-message {\n  margin-bottom: 10px;\n}\n\n.file-info {\n  font-size: 12px;\n  color: #6c757d;\n  margin-top: 5px;\n}\n\n.file-info div {\n  margin: 2px 0;\n}\n\n.progress-actions {\n  margin-top: 10px;\n}\n\n.btn-cancel,\n.btn-retry,\n.btn-download {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.btn-cancel {\n  background: #6c757d;\n  color: white;\n}\n\n.btn-cancel:hover {\n  background: #5a6268;\n}\n\n.btn-retry {\n  background: #ffc107;\n  color: #000;\n}\n\n.btn-retry:hover {\n  background: #e0a800;\n}\n\n.btn-download {\n  background: #28a745;\n  color: white;\n}\n\n.btn-download:hover {\n  background: #218838;\n}\n\n.progress-spinner {\n  width: 24px;\n  height: 24px;\n  border: 3px solid #f3f3f3;\n  border-top: 3px solid #007bff;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin: 0 auto 10px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n`;\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/components/MultiImageUpload/Component.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages/formio-file-upload/src/components/MultiImageUpload/Component.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Components } from '@formio/js';\nimport MultiImageUploadComponent from './Component';\n\ndescribe('MultiImageUploadComponent', () => {\n  beforeAll(() => {\n    (Components as any).setComponent('multiimageupload', MultiImageUploadComponent);\n  });\n\n  it('should define schema correctly', () => {\n    const schema = MultiImageUploadComponent.schema();\n    expect(schema.type).toBe('multiimageupload');\n    expect(schema.key).toBe('site_images');\n    expect(schema.maxFiles).toBe(20);\n    expect(schema.compressionQuality).toBe(0.8);\n    expect(schema.autoNumbering).toBe(true);\n    expect(schema.extractMetadata).toBe(true);\n  });\n\n  it('should have correct builderInfo', () => {\n    const info = MultiImageUploadComponent.builderInfo;\n    expect(info.title).toBe('Multi-Image Upload');\n    expect(info.group).toBe('premium');\n    expect(info.icon).toBe('images');\n    expect(info.weight).toBe(102);\n  });\n\n  it('should register with Form.io', () => {\n    const component = (Components as any).create(\n      {\n        type: 'multiimageupload',\n        key: 'site_images',\n      },\n      {},\n      {}\n    );\n    expect(component).toBeInstanceOf(MultiImageUploadComponent);\n  });\n\n  it('should handle setValue/getValue', () => {\n    const component = new MultiImageUploadComponent(\n      {\n        type: 'multiimageupload',\n        key: 'site_images',\n      },\n      {},\n      {}\n    );\n\n    const testValue = [\n      {\n        url: 'http://test.com/1',\n        name: 'Site Image 1',\n        number: 1,\n        timestamp: Date.now(),\n        size: 1024,\n        type: 'image/jpeg',\n      },\n    ];\n\n    component.setValue(testValue);\n    expect(component.getValue()).toEqual(testValue);\n  });\n\n  it('should return empty array for getValue when no data', () => {\n    const component = new MultiImageUploadComponent(\n      {\n        type: 'multiimageupload',\n        key: 'site_images',\n      },\n      {},\n      {}\n    );\n\n    expect(component.getValue()).toEqual([]);\n  });\n\n  it('should have proper schema defaults', () => {\n    const schema = MultiImageUploadComponent.schema();\n    expect(schema.storage).toBe('url');\n    expect(schema.url).toBe('http://localhost:1080/files/');\n    expect(schema.filePattern).toBe('image/*,video/*');\n    expect(schema.fileMaxSize).toBe('10MB');\n  });\n\n  it('should allow schema extension', () => {\n    const schema = MultiImageUploadComponent.schema({\n      maxFiles: 50,\n      customProp: 'test',\n    });\n    expect(schema.maxFiles).toBe(50);\n    expect((schema as any).customProp).toBe('test');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/components/MultiImageUpload/Component.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'component' should be typed with a non-any type.","line":21,"column":15,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":21,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'options' should be typed with a non-any type.","line":21,"column":31,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":21,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'data' should be typed with a non-any type.","line":21,"column":45,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":21,"endColumn":54},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[748,983],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1027,1280],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":45,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":45,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":45,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":45,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":49,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":49,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":49,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":49,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'factory' should be typed with a non-any type.","line":49,"column":33,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":49,"endColumn":45},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":53,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":53,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":53,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":53,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":72,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":72,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":83,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":83,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":83,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":83,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":87,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":87,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":87,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":87,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2539,2716],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2770,2940],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":107,"column":87,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":107,"endColumn":89,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3260,3262],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3326,3578],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3616,3723],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":125,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":125,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":125,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":125,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3771,4123],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4226,4409],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4477,4622],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5237,5377],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":166,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":166,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5389,5521],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5560,5696],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":178,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":178,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":178,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":178,"endColumn":27},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 19 to the 15 allowed.","line":178,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":178,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5737,5985],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6399,6866],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6872,7207],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7792,7924],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8044,8510],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8785,8927],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9030,9176],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9192,9803],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":271,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":271,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9388,9390],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":272,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":272,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9450,9452],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":274,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":274,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9565,9567],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":277,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":277,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9776,9778],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":281,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":281,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9811,9942],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":288,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":288,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10112,10114],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10174,10176],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":291,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":291,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10289,10291],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":295,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":295,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10518,10719],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":303,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":303,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10800,10802],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":307,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":307,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10834,10964],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":311,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":311,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10972,11253],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":333,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":333,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11973,12163],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":348,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":348,"endColumn":10},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":348,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":348,"endColumn":10},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12405,12758],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":358,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":358,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12804,12988],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13056,13202],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":383,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":383,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13804,13945],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":388,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":388,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13957,14090],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":394,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":394,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14129,14252],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":400,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":400,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14280,14421],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":406,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":406,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":406,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":406,"endColumn":11},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":407,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":407,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14468,14470],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":410,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":410,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":410,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":410,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'value' should be typed with a non-any type.","line":410,"column":12,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":410,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":411,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":411,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14526,14747],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":421,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":421,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14804,14997],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":428,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":428,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15024,15200],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":436,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":436,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15309,15504],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":63,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Multi-Image Upload Component for Form.io\n *\n * Adapter that bridges the pure React MultiImageUpload component to Form.io.\n * Follows Anti-Corruption Layer pattern to minimize coupling.\n */\n\nimport { Components } from '@formio/js';\n\nimport { UPLOAD_CONSTANTS } from '../../config/constants';\nimport { WHITELABEL_CONFIG } from '../../config/whitelabel';\nimport { logger } from '../../utils/logger';\n\nconst FileComponent = (Components as any).components.file;\n\nexport default class MultiImageUploadComponent extends FileComponent {\n  private reactContainer: HTMLElement | null = null;\n  private mountedReactComponent: any = null;\n  private static reactComponentFactory: any = null;\n\n  constructor(component: any, options: any, data: any) {\n    console.log('🔴 [MultiImageUpload] constructor() START', {\n      timestamp: new Date().toISOString(),\n      componentKey: component?.key,\n      componentType: component?.type,\n      hasOptions: !!options,\n      hasData: !!data,\n    });\n\n    super(component, options, data);\n\n    console.log('🔴 [MultiImageUpload] constructor() COMPLETE', {\n      timestamp: new Date().toISOString(),\n      componentKey: this.component?.key,\n      reactContainer: this.reactContainer,\n      mountedReactComponent: this.mountedReactComponent,\n    });\n\n    logger.info('MultiImageUploadComponent constructor called', {\n      componentKey: component?.key,\n      componentType: component?.type,\n    });\n  }\n\n  static get type() {\n    return 'multiimageupload';\n  }\n\n  static registerReactComponent(factory: any) {\n    MultiImageUploadComponent.reactComponentFactory = factory;\n  }\n\n  static schema(...extend: any[]) {\n    return FileComponent.schema(\n      {\n        type: 'multiimageupload',\n        label: 'Multi-Image Upload',\n        key: 'site_images',\n        storage: 'url',\n        url: UPLOAD_CONSTANTS.DEFAULT_TUS_ENDPOINT,\n        maxFiles: UPLOAD_CONSTANTS.DEFAULT_MAX_FILES,\n        compressionQuality: UPLOAD_CONSTANTS.DEFAULT_COMPRESSION_QUALITY,\n        autoNumbering: true,\n        extractMetadata: true,\n        filePattern: 'image/*,video/*',\n        fileMaxSize: '10MB',\n      },\n      ...extend\n    );\n  }\n\n  static get builderInfo() {\n    return {\n      title: 'Multi-Image Upload',\n      icon: 'images',\n      group: 'premium',\n      documentation: '/userguide/forms/premium-components#multi-image-upload',\n      weight: 102,\n      schema: MultiImageUploadComponent.schema(),\n    };\n  }\n\n  static editForm() {\n    return FileComponent.editForm();\n  }\n\n  attach(element: HTMLElement) {\n    console.log('🔴 [MultiImageUpload] attach() START', {\n      timestamp: new Date().toISOString(),\n      componentKey: this.component?.key,\n      elementReceived: element,\n    });\n\n    const superResult = super.attach(element);\n\n    console.log(\n      '🔴 [MultiImageUpload] attach() super.attach() complete, creating React container',\n      {\n        timestamp: new Date().toISOString(),\n      }\n    );\n\n    this.reactContainer = document.createElement('div');\n    this.reactContainer.className = WHITELABEL_CONFIG.CLASSES.UPLOAD_WIDGET;\n    this.reactContainer.id = WHITELABEL_CONFIG.ID_PATTERNS.UPLOAD_CONTAINER(this.component.key);\n\n    const uploadArea = element.querySelector(WHITELABEL_CONFIG.SELECTORS.UPLOAD_AREA) || element;\n    uploadArea.appendChild(this.reactContainer);\n\n    console.log('🔴 [MultiImageUpload] attach() React container appended to DOM', {\n      timestamp: new Date().toISOString(),\n      containerInDocument: document.contains(this.reactContainer),\n      containerParent: this.reactContainer.parentNode,\n    });\n\n    this.loadReactComponent();\n\n    console.log('🔴 [MultiImageUpload] attach() COMPLETE', {\n      timestamp: new Date().toISOString(),\n    });\n\n    return superResult;\n  }\n\n  detach() {\n    console.log('🔴 [MultiImageUpload] detach() START', {\n      timestamp: new Date().toISOString(),\n      componentKey: this.component?.key,\n      hasMountedReactComponent: !!this.mountedReactComponent,\n      hasReactContainer: !!this.reactContainer,\n      containerInDocument: this.reactContainer ? document.contains(this.reactContainer) : false,\n    });\n\n    // Properly unmount React component before detaching\n    if (this.mountedReactComponent) {\n      console.log('🔴 [MultiImageUpload] detach() unmounting React component', {\n        timestamp: new Date().toISOString(),\n        mountedComponent: this.mountedReactComponent,\n      });\n\n      try {\n        this.mountedReactComponent.unmount();\n        console.log('🔴 [MultiImageUpload] detach() React component unmounted successfully', {\n          timestamp: new Date().toISOString(),\n        });\n      } catch (error) {\n        console.error('🔴 [MultiImageUpload] detach() error unmounting React component', {\n          timestamp: new Date().toISOString(),\n          error,\n          errorMessage: error instanceof Error ? error.message : String(error),\n          errorStack: error instanceof Error ? error.stack : undefined,\n        });\n\n        logger.warn('Error unmounting React component during detach', {\n          componentKey: this.component?.key,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n      this.mountedReactComponent = null;\n    } else {\n      console.log('🔴 [MultiImageUpload] detach() no mounted React component to unmount', {\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    console.log('🔴 [MultiImageUpload] detach() clearing reactContainer reference', {\n      timestamp: new Date().toISOString(),\n    });\n\n    this.reactContainer = null;\n\n    console.log('🔴 [MultiImageUpload] detach() COMPLETE', {\n      timestamp: new Date().toISOString(),\n      cleanupComplete: true,\n    });\n  }\n\n  async loadReactComponent() {\n    console.log('🔴 [MultiImageUpload] loadReactComponent() START', {\n      timestamp: new Date().toISOString(),\n      componentKey: this.component?.key,\n      hasReactContainer: !!this.reactContainer,\n      reactContainer: this.reactContainer,\n    });\n\n    if (!this.reactContainer) {\n      console.error('🔴 [MultiImageUpload] loadReactComponent() ABORTED - reactContainer is null', {\n        timestamp: new Date().toISOString(),\n        componentKey: this.component?.key,\n        thisObject: this,\n      });\n      logger.error('loadReactComponent called but reactContainer is null', {\n        componentKey: this.component?.key,\n      });\n      return;\n    }\n\n    console.log('🔴 [MultiImageUpload] loadReactComponent() checking DOM state', {\n      timestamp: new Date().toISOString(),\n      containerInDocument: document.contains(this.reactContainer),\n      containerParent: this.reactContainer.parentNode,\n      containerParentTagName: this.reactContainer.parentNode\n        ? (this.reactContainer.parentNode as HTMLElement).tagName\n        : null,\n      documentBodyContains: document.body.contains(this.reactContainer),\n    });\n\n    console.log('🔴 [MultiImageUpload] loadReactComponent() checking factory', {\n      timestamp: new Date().toISOString(),\n      hasFactory: !!MultiImageUploadComponent.reactComponentFactory,\n      factoryType: typeof MultiImageUploadComponent.reactComponentFactory,\n      factory: MultiImageUploadComponent.reactComponentFactory,\n    });\n\n    logger.info('loadReactComponent called', {\n      componentKey: this.component?.key,\n      hasFactory: !!MultiImageUploadComponent.reactComponentFactory,\n      containerInDocument: document.contains(this.reactContainer),\n    });\n\n    try {\n      if (!MultiImageUploadComponent.reactComponentFactory) {\n        console.error(\n          '🔴 [MultiImageUpload] loadReactComponent() ABORTED - factory not registered',\n          {\n            timestamp: new Date().toISOString(),\n          }\n        );\n        throw new Error('React component factory not registered');\n      }\n\n      console.log('🔴 [MultiImageUpload] loadReactComponent() calling factory()', {\n        timestamp: new Date().toISOString(),\n      });\n\n      const { React, ReactDOM, MultiImageUpload } =\n        MultiImageUploadComponent.reactComponentFactory();\n\n      console.log('🔴 [MultiImageUpload] loadReactComponent() factory returned dependencies', {\n        timestamp: new Date().toISOString(),\n        hasReact: !!React,\n        hasReactDOM: !!ReactDOM,\n        hasMultiImageUpload: !!MultiImageUpload,\n        ReactType: typeof React,\n        ReactDOMType: typeof ReactDOM,\n        MultiImageUploadType: typeof MultiImageUpload,\n        ReactDOMHasCreateRoot: ReactDOM && typeof ReactDOM.createRoot === 'function',\n      });\n\n      logger.info('React dependencies loaded', {\n        hasReact: !!React,\n        hasReactDOM: !!ReactDOM,\n        hasMultiImageUpload: !!MultiImageUpload,\n      });\n\n      // ✅ Reuse existing React root or create new one\n      if (!this.mountedReactComponent) {\n        console.log('🔴 [MultiImageUpload] loadReactComponent() creating NEW React root', {\n          timestamp: new Date().toISOString(),\n        });\n        this.mountedReactComponent = ReactDOM.createRoot(this.reactContainer);\n      } else {\n        console.log('🔴 [MultiImageUpload] loadReactComponent() reusing existing React root', {\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      console.log('🔴 [MultiImageUpload] loadReactComponent() preparing props for render', {\n        timestamp: new Date().toISOString(),\n        componentProps: {\n          formKey: this.component.key || 'site_images',\n          maxFiles: this.component.maxFiles || UPLOAD_CONSTANTS.DEFAULT_MAX_FILES,\n          compressionQuality:\n            this.component.compressionQuality || UPLOAD_CONSTANTS.DEFAULT_COMPRESSION_QUALITY,\n          autoNumbering: this.component.autoNumbering ?? true,\n          extractMetadata: this.component.extractMetadata ?? true,\n          value: this.dataValue || [],\n        },\n      });\n\n      console.log('🔴 [MultiImageUpload] loadReactComponent() calling render()', {\n        timestamp: new Date().toISOString(),\n      });\n\n      // ✅ Update props on existing root\n      this.mountedReactComponent.render(\n        React.createElement(MultiImageUpload, {\n          formKey: this.component.key || 'site_images',\n          maxFiles: this.component.maxFiles || UPLOAD_CONSTANTS.DEFAULT_MAX_FILES,\n          compressionQuality:\n            this.component.compressionQuality || UPLOAD_CONSTANTS.DEFAULT_COMPRESSION_QUALITY,\n          autoNumbering: this.component.autoNumbering ?? true,\n          extractMetadata: this.component.extractMetadata ?? true,\n          onChange: (files: any) => {\n            console.log('🔴 [MultiImageUpload] React onChange callback triggered', {\n              timestamp: new Date().toISOString(),\n              filesCount: files?.length,\n              files,\n            });\n\n            this.setValue(files);\n          },\n          value: this.dataValue || [],\n        })\n      );\n\n      console.log('🔴 [MultiImageUpload] loadReactComponent() render() called', {\n        timestamp: new Date().toISOString(),\n      });\n\n      console.log('🔴 [MultiImageUpload] loadReactComponent() SUCCESS - React component mounted', {\n        timestamp: new Date().toISOString(),\n        mountedReactComponent: this.mountedReactComponent,\n        containerStillInDocument: document.contains(this.reactContainer),\n      });\n    } catch (error) {\n      console.error('🔴 [MultiImageUpload] loadReactComponent() FAILED with error', {\n        timestamp: new Date().toISOString(),\n        componentKey: this.component?.key,\n        error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorStack: error instanceof Error ? error.stack : undefined,\n        errorType: error ? error.constructor.name : 'unknown',\n      });\n\n      logger.error('Failed to load React component', {\n        componentKey: this.component?.key,\n        error: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n      });\n\n      if (this.reactContainer) {\n        console.log(\n          '🔴 [MultiImageUpload] loadReactComponent() displaying error message in container',\n          {\n            timestamp: new Date().toISOString(),\n          }\n        );\n        this.reactContainer.innerHTML = `\n          <div class=\"alert alert-danger\">\n            Failed to load Multi-Image Upload component. Please check console for details.\n          </div>\n        `;\n      }\n    }\n  }\n\n  destroy() {\n    console.log('🔴 [MultiImageUpload] destroy() START', {\n      timestamp: new Date().toISOString(),\n      componentKey: this.component?.key,\n      hasMountedReactComponent: !!this.mountedReactComponent,\n      hasReactContainer: !!this.reactContainer,\n      containerInDocument: this.reactContainer ? document.contains(this.reactContainer) : false,\n    });\n\n    if (this.mountedReactComponent) {\n      console.log('🔴 [MultiImageUpload] destroy() unmounting React component', {\n        timestamp: new Date().toISOString(),\n        mountedComponent: this.mountedReactComponent,\n      });\n\n      try {\n        this.mountedReactComponent.unmount();\n        console.log('🔴 [MultiImageUpload] destroy() React component unmounted successfully', {\n          timestamp: new Date().toISOString(),\n        });\n      } catch (error) {\n        console.error('🔴 [MultiImageUpload] destroy() error unmounting React component', {\n          timestamp: new Date().toISOString(),\n          error,\n          errorMessage: error instanceof Error ? error.message : String(error),\n          errorStack: error instanceof Error ? error.stack : undefined,\n        });\n\n        logger.warn('Error unmounting React component', {\n          componentKey: this.component?.key,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n      this.mountedReactComponent = null;\n    } else {\n      console.log('🔴 [MultiImageUpload] destroy() no mounted React component to unmount', {\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    console.log('🔴 [MultiImageUpload] destroy() clearing reactContainer reference', {\n      timestamp: new Date().toISOString(),\n    });\n\n    this.reactContainer = null;\n\n    console.log('🔴 [MultiImageUpload] destroy() calling super.destroy()', {\n      timestamp: new Date().toISOString(),\n    });\n\n    super.destroy();\n\n    console.log('🔴 [MultiImageUpload] destroy() COMPLETE', {\n      timestamp: new Date().toISOString(),\n      fullCleanupComplete: true,\n    });\n  }\n\n  getValue() {\n    return this.dataValue || [];\n  }\n\n  setValue(value: any, flags: any = {}) {\n    console.log('🔴 [MultiImageUpload] setValue() called', {\n      timestamp: new Date().toISOString(),\n      componentKey: this.component?.key,\n      newValue: value,\n      flags,\n      previousValue: this.dataValue,\n    });\n\n    const changed = super.setValue(value, flags);\n\n    console.log('🔴 [MultiImageUpload] setValue() super.setValue() result', {\n      timestamp: new Date().toISOString(),\n      valueChanged: changed,\n      updatedDataValue: this.dataValue,\n    });\n\n    if (changed) {\n      console.log('🔴 [MultiImageUpload] setValue() value changed, triggering change event', {\n        timestamp: new Date().toISOString(),\n        willTriggerChange: true,\n      });\n\n      this.triggerChange();\n\n      // ✅ React component will sync via useEffect - no need to remount\n      console.log('🔴 [MultiImageUpload] setValue() React will sync via useEffect', {\n        timestamp: new Date().toISOString(),\n        reactComponentMounted: !!this.mountedReactComponent,\n      });\n    }\n\n    return changed;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/components/MultiImageUpload/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/components/TusFileUpload/Component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TusConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'TusConfig' is defined but never used.","line":10,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"TusConfig"},"fix":{"range":[248,259],"text":""},"desc":"Remove unused variable 'TusConfig'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":44,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":44,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":55,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":55,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":55,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":55,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'component' should be typed with a non-any type.","line":134,"column":15,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":134,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'options' should be typed with a non-any type.","line":134,"column":31,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":134,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'data' should be typed with a non-any type.","line":134,"column":45,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":134,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":137,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":137,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3991,4039],"text":"(this.component.tusEndpoint ?? this.component.url)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":137,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":137,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4040,4042],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":140,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":140,"endColumn":7},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":140,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":140,"endColumn":7},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":145,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":145,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":148,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":148,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4311,4313],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":149,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":149,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4367,4369],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":160,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":160,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4683,4685],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":175,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":175,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4991,4993],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":176,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":176,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5042,5044],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":177,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":177,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5084,5086],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":181,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":181,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":181,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":181,"endColumn":9},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":225,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":225,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6401,6403],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":241,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":241,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7000,7002],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":294,"column":34,"nodeType":"NewExpression","endLine":294,"endColumn":72},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":320,"column":30,"nodeType":"Literal","endLine":320,"endColumn":63},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":326,"column":21,"nodeType":"MemberExpression","endLine":326,"endColumn":32},{"ruleId":"no-async-promise-executor","severity":2,"message":"Promise executor functions should not be async.","line":335,"column":24,"nodeType":"Identifier","messageId":"async","endLine":335,"endColumn":29},{"ruleId":"prefer-promise-reject-errors","severity":2,"message":"Expected the Promise rejection reason to be an Error.","line":345,"column":9,"nodeType":"CallExpression","messageId":"rejectAnError","endLine":358,"endColumn":11},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":416,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":416,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12552,12554],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":441,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":441,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'requestAnimationFrame' is not defined.","line":445,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":445,"endColumn":28},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":449,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":449,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13637,13639],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":455,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":455,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13761,13763],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":463,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":463,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":463,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":463,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":470,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":470,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":470,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":470,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":477,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":477,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":477,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":477,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":494,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":494,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":494,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":494,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'value' should be typed with a non-any type.","line":494,"column":12,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":494,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'value' should be typed with a non-any type.","line":503,"column":20,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":503,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":505,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":505,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14767,14786],"text":"(val.name ?? val.url)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":505,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":505,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14787,14789],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":507,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":507,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14823,14848],"text":"(value?.name ?? value?.url)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":507,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":507,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14849,14851],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'value' should be typed with a non-any type.","line":510,"column":11,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":510,"endColumn":21}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TUS File Upload Component for Form.io\n *\n * Extends Form.io's base File component to provide TUS resumable upload capabilities\n */\n\nimport { Components } from '@formio/js';\nimport * as tus from 'tus-js-client';\n\nimport { type ComponentSchema, TusConfig, type UploadFile, UploadStatus } from '../../types';\nimport { logger } from '../../utils/logger';\nimport { verifyFileType, sanitizeFilename } from '../../validators';\n\nconst FileComponent = Components.components.file;\n\nexport default class TusFileUploadComponent extends FileComponent {\n  public tusUpload: any;\n  public currentFile: UploadFile | null = null;\n  private uploadQueue: File[] = [];\n  private isUploading = false;\n  // P1-T6: Progress throttling state (88% DOM reduction)\n  private rafPending = false;\n  // P3-T1: Cached TUS config (2-3ms saved per file)\n  private cachedTusConfig: Partial<tus.UploadOptions> | null = null;\n\n  static schema(...extend: any[]): ComponentSchema {\n    return FileComponent.schema({\n      type: 'tusupload',\n      label: 'TUS File Upload',\n      key: 'tusupload',\n      storage: 'tus',\n      url: '',\n      options: {\n        uploadOnly: false,\n      },\n      filePattern: '*',\n      fileMinSize: '0KB',\n      fileMaxSize: '1GB',\n      uploadOnly: false,\n      ...extend,\n    });\n  }\n\n  static get builderInfo() {\n    return {\n      title: 'TUS File Upload',\n      icon: 'cloud-upload',\n      group: 'premium',\n      documentation: '/userguide/forms/premium-components#file-upload',\n      weight: 100,\n      schema: TusFileUploadComponent.schema(),\n    };\n  }\n\n  static editForm() {\n    return FileComponent.editForm([\n      {\n        key: 'display',\n        components: [\n          {\n            key: 'displayBasic',\n            components: [\n              {\n                type: 'textfield',\n                key: 'tusEndpoint',\n                label: 'TUS Upload Endpoint',\n                placeholder: 'https://example.com/files',\n                weight: 25,\n                tooltip: 'The TUS server endpoint for resumable uploads',\n                input: true,\n              },\n              {\n                type: 'number',\n                key: 'chunkSize',\n                label: 'Chunk Size (MB)',\n                defaultValue: 8,\n                weight: 26,\n                tooltip: 'Size of each upload chunk in megabytes',\n                input: true,\n              },\n              {\n                type: 'checkbox',\n                key: 'resumable',\n                label: 'Enable Resumable Uploads',\n                defaultValue: true,\n                weight: 27,\n                tooltip: 'Allow uploads to resume after connection loss',\n                input: true,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        key: 'validation',\n        components: [\n          {\n            key: 'validationBasic',\n            components: [\n              {\n                type: 'textfield',\n                key: 'filePattern',\n                label: 'File Pattern',\n                placeholder: '*.pdf,*.doc,*.docx',\n                weight: 10,\n                tooltip: 'Allowed file extensions',\n                input: true,\n              },\n              {\n                type: 'textfield',\n                key: 'fileMinSize',\n                label: 'Minimum File Size',\n                placeholder: '1KB',\n                weight: 11,\n                tooltip: 'Minimum allowed file size',\n                input: true,\n              },\n              {\n                type: 'textfield',\n                key: 'fileMaxSize',\n                label: 'Maximum File Size',\n                placeholder: '10MB',\n                weight: 12,\n                tooltip: 'Maximum allowed file size',\n                input: true,\n              },\n            ],\n          },\n        ],\n      },\n    ]);\n  }\n\n  constructor(component: any, options: any, data: any) {\n    super(component, options, data);\n    this.component.storage = 'tus';\n    this.component.url = this.component.tusEndpoint || this.component.url || '/files';\n  }\n\n  init() {\n    super.init();\n    this.initializeTusClient();\n  }\n\n  private initializeTusClient() {\n    // P3-T1: Cache TUS config to avoid recreating for every file (2-3ms per file saved)\n    this.cachedTusConfig = {\n      endpoint: this.component.url || '/files',\n      chunkSize: (this.component.chunkSize || 8) * 1024 * 1024,\n      retryDelays: [0, 3000, 5000, 10000, 20000],\n      headers: this.getHeaders(),\n    };\n\n    // Will be initialized per upload\n    this.tusUpload = null;\n  }\n\n  private getHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {\n      'x-jwt-token': this.root?.token || '',\n    };\n\n    // Add custom headers if provided\n    if (this.component.headers) {\n      Object.assign(headers, this.component.headers);\n    }\n\n    return headers;\n  }\n\n  private getMetadata(): Record<string, string> {\n    return {\n      filename: '',\n      filetype: '',\n      formId: this.root?.formId || '',\n      submissionId: this.root?.submissionId || '',\n      fieldKey: this.component.key || '',\n    };\n  }\n\n  attach(element: HTMLElement) {\n    this.loadRefs(element, {\n      fileDrop: 'single',\n      fileBrowse: 'single',\n      galleryButton: 'single',\n      cameraButton: 'single',\n      fileUpload: 'single',\n      hiddenFileInputElement: 'single',\n      fileList: 'single',\n      camera: 'single',\n      canvas: 'single',\n      fileStatusUploading: 'multiple',\n      fileImage: 'multiple',\n      fileError: 'multiple',\n      fileLink: 'multiple',\n      removeLink: 'multiple',\n      fileStatusRemove: 'multiple',\n      fileSize: 'multiple',\n      fileUploadingStatus: 'multiple',\n      fileProcessingStatus: 'multiple',\n      fileProgress: 'multiple',\n      fileProgressInner: 'multiple',\n    });\n\n    const superAttach = super.attach(element);\n\n    if (this.refs.fileBrowse) {\n      this.addEventListener(this.refs.fileBrowse, 'click', (event: Event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (this.refs.hiddenFileInputElement) {\n          this.refs.hiddenFileInputElement.click();\n        }\n      });\n    }\n\n    return superAttach;\n  }\n\n  async upload(files: File[]): Promise<any[]> {\n    this.uploadQueue = files;\n\n    // P1-T4: Parallel uploads with batching (66% faster - 300s -> 100s for 10 files)\n    const parallelLimit = this.component.parallelUploads || 3;\n    const results = [];\n\n    // Process files in batches of parallelLimit\n    for (let i = 0; i < files.length; i += parallelLimit) {\n      const batch = files.slice(i, i + parallelLimit);\n\n      // Upload batch in parallel using Promise.all\n      const batchResults = await Promise.all(\n        batch.map(async (file) => {\n          this.isUploading = true;\n\n          try {\n            // Security: Validate file before upload\n            const validationResult = await this.validateFile(file);\n            if (!validationResult.valid) {\n              throw new Error(validationResult.error || 'File validation failed');\n            }\n\n            const result = await this.uploadFile(file);\n            this.emit('fileUploadComplete', result);\n            return result;\n          } catch (error) {\n            logger.error('[TUS] Upload error:', { error });\n            this.emit('fileUploadError', error);\n            return { error };\n          }\n        })\n      );\n\n      results.push(...batchResults);\n    }\n\n    this.isUploading = false;\n\n    // P1-T3: Clear upload queue to prevent memory leaks (45% memory reduction)\n    this.uploadQueue = [];\n\n    return results;\n  }\n\n  private async validateFile(file: File): Promise<{ valid: boolean; error?: string }> {\n    // File size validation\n    const maxSize = this.parseFileSize(this.component.fileMaxSize);\n    const minSize = this.parseFileSize(this.component.fileMinSize);\n\n    if (maxSize && file.size > maxSize) {\n      return {\n        valid: false,\n        error: `File size exceeds maximum allowed (${this.component.fileMaxSize})`,\n      };\n    }\n\n    if (minSize && file.size < minSize) {\n      return {\n        valid: false,\n        error: `File size is below minimum required (${this.component.fileMinSize})`,\n      };\n    }\n\n    // File type validation\n    if (this.component.filePattern && this.component.filePattern !== '*') {\n      const allowedTypes = this.parseFilePattern(this.component.filePattern);\n      const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\n      const isAllowed = allowedTypes.some((pattern) => {\n        if (pattern.startsWith('.')) {\n          return fileExt === pattern;\n        }\n        if (pattern.includes('/')) {\n          return file.type.match(new RegExp(pattern.replace('*', '.*')));\n        }\n        return false;\n      });\n\n      if (!isAllowed) {\n        return {\n          valid: false,\n          error: `File type not allowed. Allowed: ${this.component.filePattern}`,\n        };\n      }\n    }\n\n    return { valid: true };\n  }\n\n  private parseFileSize(size?: string): number | null {\n    if (!size) return null;\n\n    const units: Record<string, number> = {\n      B: 1,\n      KB: 1024,\n      MB: 1024 * 1024,\n      GB: 1024 * 1024 * 1024,\n    };\n\n    const match = size.match(/^(\\d+(?:\\.\\d+)?)\\s*([gkmt]?b)$/i);\n    if (!match) return null;\n\n    const value = Number.parseFloat(match[1]);\n    const unit = match[2].toUpperCase();\n\n    return value * (units[unit] || 1);\n  }\n\n  private parseFilePattern(pattern: string): string[] {\n    if (!pattern || pattern === '*') return ['*'];\n    return pattern.split(',').map((p) => p.trim());\n  }\n\n  private async uploadFile(file: File): Promise<UploadFile> {\n    return new Promise(async (resolve, reject) => {\n      // Security: Sanitize filename to prevent path traversal and XSS\n      const safeName = sanitizeFilename(file.name, {\n        addTimestamp: true,\n        preserveExtension: false,\n      });\n\n      // Security: Verify file type matches content (magic number check)\n      const isValidType = await verifyFileType(file, file.type);\n      if (!isValidType) {\n        reject({\n          id: this.generateFileId(),\n          name: safeName,\n          size: file.size,\n          type: file.type,\n          storage: 'tus',\n          status: UploadStatus.FAILED,\n          error: {\n            code: 'INVALID_FILE_TYPE',\n            message: 'File content does not match declared type. This file may be dangerous.',\n          },\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        });\n        return;\n      }\n\n      const uploadFile: UploadFile = {\n        id: this.generateFileId(),\n        name: safeName,\n        originalName: file.name,\n        size: file.size,\n        type: file.type,\n        storage: 'tus',\n        status: UploadStatus.PENDING,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // P3-T1: Use cached config to avoid object recreation (2-3ms saved per file)\n      const upload = new tus.Upload(file, {\n        ...this.cachedTusConfig,\n        metadata: {\n          ...this.getMetadata(),\n          filename: safeName,\n          originalFilename: file.name,\n          filetype: file.type || 'application/octet-stream',\n        },\n        onError: (error: Error) => {\n          logger.error('[TUS] Upload failed:', { error: error.message, stack: error.stack });\n          uploadFile.status = UploadStatus.FAILED;\n          uploadFile.error = {\n            code: 'UPLOAD_ERROR',\n            message: error.message,\n          };\n          reject(uploadFile);\n        },\n        onProgress: (bytesUploaded: number, bytesTotal: number) => {\n          const percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2);\n          uploadFile.progress = Number.parseFloat(percentage);\n          uploadFile.status = UploadStatus.UPLOADING;\n          this.updateProgress(uploadFile);\n        },\n        onSuccess: () => {\n          uploadFile.status = UploadStatus.COMPLETED;\n          uploadFile.url = upload.url ?? undefined;\n          uploadFile.uploadId = upload.url?.split('/').pop();\n\n          // Create Form.io compatible file data\n          const fileData = {\n            name: uploadFile.name,\n            size: uploadFile.size,\n            type: uploadFile.type,\n            url: uploadFile.url,\n            storage: 'tus',\n            originalName: file.name,\n            uploadId: uploadFile.uploadId,\n          };\n\n          // Update Form.io component value (handle single vs multiple files)\n          if (this.component.multiple) {\n            const currentValue = this.dataValue || [];\n            this.dataValue = Array.isArray(currentValue) ? [...currentValue, fileData] : [fileData];\n          } else {\n            this.dataValue = fileData;\n          }\n\n          // Trigger Form.io updates to propagate value to form submission\n          this.updateValue();\n          this.triggerChange();\n\n          this.updateProgress(uploadFile);\n          resolve(uploadFile);\n        },\n      });\n\n      // Store reference for pause/resume\n      this.tusUpload = upload;\n      this.currentFile = uploadFile;\n\n      // Start upload\n      upload.start();\n      this.emit('fileUploadStart', uploadFile);\n    });\n  }\n\n  private updateProgress(file: UploadFile) {\n    // P1-T6: Throttle DOM updates using requestAnimationFrame (88% reflow reduction)\n    if (!this.rafPending) {\n      this.rafPending = true;\n      requestAnimationFrame(() => {\n        if (this.refs.fileProgress && this.refs.fileProgress.length > 0) {\n          const progressBar = this.refs.fileProgress[0] as HTMLElement;\n          if (progressBar) {\n            progressBar.style.width = `${file.progress || 0}%`;\n          }\n        }\n\n        this.emit('fileUploadProgress', {\n          file,\n          progress: file.progress || 0,\n        });\n\n        this.rafPending = false;\n      });\n    }\n  }\n\n  pauseUpload() {\n    if (this.tusUpload) {\n      this.tusUpload.abort();\n      this.emit('fileUploadPaused', this.currentFile);\n    }\n  }\n\n  resumeUpload() {\n    if (this.tusUpload) {\n      this.tusUpload.start();\n      this.emit('fileUploadResumed', this.currentFile);\n    }\n  }\n\n  cancelUpload() {\n    if (this.tusUpload) {\n      this.tusUpload.abort();\n      this.tusUpload = null;\n      this.currentFile = null;\n      this.emit('fileUploadCancelled');\n    }\n  }\n\n  private generateFileId(): string {\n    return `tus_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  getValue(): any {\n    return this.dataValue;\n  }\n\n  setValue(value: any, flags: any = {}) {\n    const changed = super.setValue(value, flags);\n    if (changed) {\n      this.redraw();\n      this.triggerChange();\n    }\n    return changed;\n  }\n\n  getValueAsString(value: any): string {\n    if (Array.isArray(value)) {\n      return value.map((val) => val.name || val.url || '').join(', ');\n    }\n    return value?.name || value?.url || '';\n  }\n\n  getView(value: any): string {\n    if (!value) return '';\n\n    if (Array.isArray(value)) {\n      return value\n        .map(\n          (file) =>\n            `<a href=\"${file.url}\" target=\"_blank\" rel=\"noopener noreferrer\">${file.name}</a>`\n        )\n        .join('<br>');\n    }\n\n    return `<a href=\"${value.url}\" target=\"_blank\" rel=\"noopener noreferrer\">${value.name}</a>`;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/components/TusFileUpload/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/components/UppyFileUpload/Component.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":66,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":66,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":66,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":66,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":77,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":77,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":77,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":77,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'component' should be typed with a non-any type.","line":170,"column":15,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":170,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'options' should be typed with a non-any type.","line":170,"column":31,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":170,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'data' should be typed with a non-any type.","line":170,"column":45,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":170,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":172,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":172,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5520,5522],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":175,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":175,"endColumn":7},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":175,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":175,"endColumn":7},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":179,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":179,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":179,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":179,"endColumn":9},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":187,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":187,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5924,5926],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":196,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":196,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":198,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":198,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6193,6195],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":207,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":207,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6696,6698],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":208,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":208,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6749,6751],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":209,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":209,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6793,6795],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":225,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":225,"endColumn":37},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":227,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":227,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7330,7332],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":238,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":238,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7840,7842],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":249,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":249,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8181,8183],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":250,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":250,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8237,8239],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":261,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":261,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8603,8605],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":282,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":282,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9205,9207],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":290,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":290,"endColumn":33},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":344,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":344,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10860,10862],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":362,"column":24,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":362,"endColumn":34,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[11528,11529],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"no-undef","severity":2,"message":"'localStorage' is not defined.","line":364,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":364,"endColumn":23},{"ruleId":"sonarjs/no-duplicate-string","severity":1,"message":"Define a constant instead of duplicating this literal 3 times.","line":382,"column":18,"nodeType":"Literal","endLine":382,"endColumn":30},{"ruleId":"sonarjs/no-duplicate-string","severity":1,"message":"Define a constant instead of duplicating this literal 3 times.","line":384,"column":18,"nodeType":"Literal","endLine":384,"endColumn":35},{"ruleId":"sonarjs/no-duplicate-string","severity":1,"message":"Define a constant instead of duplicating this literal 3 times.","line":385,"column":18,"nodeType":"Literal","endLine":385,"endColumn":34},{"ruleId":"sonarjs/no-duplicate-string","severity":1,"message":"Define a constant instead of duplicating this literal 3 times.","line":386,"column":18,"nodeType":"Literal","endLine":386,"endColumn":32},{"ruleId":"sonarjs/no-duplicate-string","severity":1,"message":"Define a constant instead of duplicating this literal 3 times.","line":389,"column":18,"nodeType":"Literal","endLine":389,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":394,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":394,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12537,12539],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":395,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":395,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12584,12586],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":409,"column":30,"nodeType":"Literal","endLine":409,"endColumn":63},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":415,"column":21,"nodeType":"MemberExpression","endLine":415,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":434,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":434,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":434,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":434,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'value' should be typed with a non-any type.","line":434,"column":12,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":434,"endColumn":22},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.","line":438,"column":3,"nodeType":null,"messageId":"refactorFunction","endLine":438,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":438,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":438,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":438,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":438,"endColumn":9},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.","line":456,"column":3,"nodeType":null,"messageId":"refactorFunction","endLine":456,"endColumn":10},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":456,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":456,"endColumn":10},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":456,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":456,"endColumn":10}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Uppy File Upload Component for Form.io\n *\n * Provides a rich file upload experience using Uppy.js Dashboard\n */\n\nimport { Components } from '@formio/js';\nimport Audio from '@uppy/audio';\nimport Uppy from '@uppy/core';\nimport Dashboard from '@uppy/dashboard';\nimport GoldenRetriever from '@uppy/golden-retriever';\nimport ImageEditor from '@uppy/image-editor';\nimport ScreenCapture from '@uppy/screen-capture';\nimport Tus from '@uppy/tus';\nimport Url from '@uppy/url';\nimport Webcam from '@uppy/webcam';\n\nimport { type ComponentSchema, type UppyConfig, type UploadFile, UploadStatus } from '../../types';\nimport { logger } from '../../utils/logger';\nimport { verifyFileType, sanitizeFilename } from '../../validators';\n\n// Import Uppy styles\n// NOTE: Uppy CSS imports removed - consuming apps must import Uppy styles\n// See documentation for required CSS imports\n\nconst FileComponent = Components.components.file;\n\nexport default class UppyFileUploadComponent extends FileComponent {\n  public uppy: Uppy | null = null;\n  private dashboardElement: HTMLElement | null = null;\n\n  private handleFileAdded?: (file: any) => Promise<void>;\n  private handleUpload?: () => void;\n  private handleUploadProgress?: (file: any, progress: any) => void;\n  private handleUploadSuccess?: (file: any, response: any) => void;\n  private handleUploadError?: (file: any, error: any) => void;\n  private handleComplete?: (result: any) => void;\n  private handleError?: (error: any) => void;\n  private handleCancelAll?: () => void;\n\n  static schema(...extend: any[]): ComponentSchema {\n    return FileComponent.schema({\n      type: 'uppyupload',\n      label: 'Uppy File Upload',\n      key: 'uppyupload',\n      storage: 'url',\n      url: '',\n      options: {\n        uploadOnly: false,\n      },\n      filePattern: '*',\n      fileMinSize: '0KB',\n      fileMaxSize: '1GB',\n      uppyOptions: {\n        inline: true,\n        height: 450,\n        showProgressDetails: true,\n        showLinkToFileUploadResult: true,\n        proudlyDisplayPoweredByUppy: false,\n        plugins: ['Webcam', 'ScreenCapture', 'ImageEditor', 'Audio', 'Url'],\n      },\n      ...extend,\n    });\n  }\n\n  static get builderInfo() {\n    return {\n      title: 'Uppy File Upload',\n      icon: 'cloud-upload-alt',\n      group: 'premium',\n      documentation: '/userguide/forms/premium-components#uppy-file-upload',\n      weight: 101,\n      schema: UppyFileUploadComponent.schema(),\n    };\n  }\n\n  static editForm() {\n    return FileComponent.editForm([\n      {\n        key: 'display',\n        components: [\n          {\n            key: 'displayBasic',\n            components: [\n              {\n                type: 'checkbox',\n                key: 'uppyOptions.inline',\n                label: 'Inline Dashboard',\n                defaultValue: true,\n                weight: 25,\n                tooltip: 'Show dashboard inline vs modal',\n                input: true,\n              },\n              {\n                type: 'number',\n                key: 'uppyOptions.height',\n                label: 'Dashboard Height',\n                defaultValue: 450,\n                weight: 26,\n                conditional: {\n                  json: {\n                    '===': [{ var: 'data.uppyOptions.inline' }, true],\n                  },\n                },\n                input: true,\n              },\n              {\n                type: 'checkbox',\n                key: 'uppyOptions.showProgressDetails',\n                label: 'Show Progress Details',\n                defaultValue: true,\n                weight: 27,\n                input: true,\n              },\n              {\n                type: 'checkbox',\n                key: 'uppyOptions.autoProceed',\n                label: 'Auto Proceed',\n                defaultValue: false,\n                weight: 28,\n                tooltip: 'Automatically start upload after adding files',\n                input: true,\n              },\n              {\n                type: 'checkbox',\n                key: 'uppyOptions.allowMultipleUploadBatches',\n                label: 'Allow Multiple Upload Batches',\n                defaultValue: true,\n                weight: 29,\n                input: true,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        key: 'data',\n        components: [\n          {\n            key: 'dataBasic',\n            components: [\n              {\n                type: 'select',\n                key: 'uppyOptions.plugins',\n                label: 'Enabled Plugins',\n                multiple: true,\n                weight: 30,\n                data: {\n                  values: [\n                    { label: 'Webcam', value: 'Webcam' },\n                    { label: 'Screen Capture', value: 'ScreenCapture' },\n                    { label: 'Image Editor', value: 'ImageEditor' },\n                    { label: 'Audio Recording', value: 'Audio' },\n                    { label: 'Import from URL', value: 'Url' },\n                    { label: 'Google Drive', value: 'GoogleDrive' },\n                    { label: 'Dropbox', value: 'Dropbox' },\n                    { label: 'Instagram', value: 'Instagram' },\n                  ],\n                },\n                defaultValue: ['Webcam', 'ScreenCapture', 'ImageEditor', 'Audio', 'Url'],\n                input: true,\n              },\n            ],\n          },\n        ],\n      },\n    ]);\n  }\n\n  constructor(component: any, options: any, data: any) {\n    super(component, options, data);\n    this.component.storage = this.component.storage || 'url';\n  }\n\n  init() {\n    super.init();\n  }\n\n  attach(element: HTMLElement) {\n    const superAttach = super.attach(element);\n\n    // Create container for Uppy Dashboard\n    this.dashboardElement = document.createElement('div');\n    this.dashboardElement.className = 'uppy-dashboard-container';\n\n    // Find or create upload area\n    const uploadArea = element.querySelector('.formio-component-file') || element;\n    uploadArea.appendChild(this.dashboardElement);\n\n    // Initialize Uppy\n    this.initializeUppy();\n\n    return superAttach;\n  }\n\n  private initializeUppy() {\n    const uppyConfig: UppyConfig = {\n      autoProceed: this.component.uppyOptions?.autoProceed || false,\n      allowMultipleUploadBatches: this.component.uppyOptions?.allowMultipleUploadBatches !== false,\n      restrictions: {\n        maxFileSize: this.parseFileSize(this.component.fileMaxSize) ?? undefined,\n        minFileSize: this.parseFileSize(this.component.fileMinSize) ?? undefined,\n        maxNumberOfFiles: this.component.multiple ? 10 : 1,\n        allowedFileTypes: this.parseFilePattern(this.component.filePattern) ?? undefined,\n      },\n      meta: {\n        formId: this.root?.formId || '',\n        submissionId: this.root?.submissionId || '',\n        fieldKey: this.component.key || '',\n      },\n    };\n\n    // Initialize Uppy instance\n    this.uppy = new Uppy({\n      id: `uppy_${this.id}`,\n      debug: false,\n      autoProceed: uppyConfig.autoProceed,\n      allowMultipleUploadBatches: uppyConfig.allowMultipleUploadBatches,\n      restrictions: uppyConfig.restrictions,\n      meta: uppyConfig.meta,\n    });\n\n    // Add Dashboard plugin\n    this.uppy.use(Dashboard, {\n      target: this.dashboardElement!,\n      inline: this.component.uppyOptions?.inline !== false,\n      height: this.component.uppyOptions?.height || 450,\n      width: '100%',\n      hideProgressDetails: this.component.uppyOptions?.showProgressDetails === false,\n      showLinkToFileUploadResult: this.component.uppyOptions?.showLinkToFileUploadResult !== false,\n      proudlyDisplayPoweredByUppy: false,\n      hideUploadButton: uppyConfig.autoProceed,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      hideProgressAfterFinish: false,\n      doneButtonHandler: null,\n      note: this.component.description || null,\n      closeModalOnClickOutside: true,\n      closeAfterFinish: false,\n      disableThumbnailGenerator: false,\n      disablePageScrollWhenModalOpen: true,\n      animateOpenClose: true,\n      browserBackButtonClose: true,\n    });\n\n    // Add TUS plugin for resumable uploads\n    this.uppy.use(Tus, {\n      endpoint: this.component.url || '/files',\n      chunkSize: (this.component.chunkSize || 8) * 1024 * 1024,\n      retryDelays: [0, 3000, 5000, 10000, 20000],\n      headers: this.getHeaders(),\n    });\n\n    // Add Golden Retriever for recovering uploads after browser crash\n    this.uppy.use(GoldenRetriever, {\n      serviceWorker: false,\n    });\n\n    // Add optional plugins based on configuration\n    const plugins = this.component.uppyOptions?.plugins || [];\n\n    if (plugins.includes('Webcam')) {\n      (this.uppy as any).use(Webcam, { target: Dashboard });\n    }\n\n    if (plugins.includes('ScreenCapture')) {\n      (this.uppy as any).use(ScreenCapture, { target: Dashboard });\n    }\n\n    if (plugins.includes('ImageEditor')) {\n      (this.uppy as any).use(ImageEditor, { target: Dashboard });\n    }\n\n    if (plugins.includes('Audio')) {\n      (this.uppy as any).use(Audio, { target: Dashboard });\n    }\n\n    if (plugins.includes('Url')) {\n      (this.uppy as any).use(Url, {\n        target: Dashboard,\n        companionUrl: this.component.companionUrl || null,\n      });\n    }\n\n    // Set up event handlers\n    this.setupUppyEventHandlers();\n  }\n\n  private setupUppyEventHandlers() {\n    if (!this.uppy) return;\n\n    this.handleFileAdded = async (file: any) => {\n      // Security: Sanitize filename\n      const safeName = sanitizeFilename(file.name, {\n        addTimestamp: true,\n        preserveExtension: false,\n      });\n\n      // Security: Verify file type\n      const isValidType = await verifyFileType(file.data, file.type);\n      if (!isValidType) {\n        logger.error('[Uppy Security] File type verification failed:', file.name);\n        this.uppy?.info(\n          `Security: File \"${file.name}\" content does not match declared type`,\n          'error',\n          5000\n        );\n        this.uppy?.removeFile(file.id);\n        return;\n      }\n\n      // Update file with sanitized name\n      this.uppy?.setFileMeta(file.id, {\n        name: safeName,\n        originalName: file.name,\n      });\n\n      this.emit('fileAdded', file);\n    };\n\n    this.handleUpload = () => {\n      this.emit('uploadStart');\n    };\n\n    this.handleUploadProgress = (file: any, progress: any) => {\n      this.emit('uploadProgress', { file, progress });\n    };\n\n    this.handleUploadSuccess = (file: any, response: any) => {\n      const uploadFile: UploadFile = {\n        id: file.id,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        url: response.uploadURL,\n        storage: this.component.storage,\n        status: UploadStatus.COMPLETED,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Add to component value\n      const currentValue = this.getValue() || [];\n      if (this.component.multiple) {\n        this.setValue([...currentValue, uploadFile]);\n      } else {\n        this.setValue(uploadFile);\n      }\n\n      this.emit('uploadSuccess', uploadFile);\n    };\n\n    this.handleUploadError = (file: any, error: any) => {\n      logger.error('[Uppy] Upload error:', { fileName: file?.name, error });\n      this.emit('uploadError', { file, error });\n    };\n\n    this.handleComplete = (result: any) => {\n      // P3-T2: Clean up GoldenRetriever localStorage to prevent QuotaExceededError (critical for Safari 5MB limit)\n      if (result.successful.length > 0 && result.failed.length === 0) {\n        const uppyId = this.uppy!.getID();\n        try {\n          localStorage.removeItem(`uppy/${uppyId}`);\n        } catch (error) {\n          logger.warn('[Uppy] Failed to clean recovery state:', { error });\n        }\n      }\n\n      this.emit('uploadComplete', result);\n    };\n\n    this.handleError = (error: any) => {\n      logger.error('[Uppy] Error:', { error });\n      this.emit('error', error);\n    };\n\n    this.handleCancelAll = () => {\n      this.emit('uploadCancelled');\n    };\n\n    this.uppy.on('file-added', this.handleFileAdded);\n    this.uppy.on('upload', this.handleUpload);\n    this.uppy.on('upload-progress', this.handleUploadProgress);\n    this.uppy.on('upload-success', this.handleUploadSuccess);\n    this.uppy.on('upload-error', this.handleUploadError);\n    this.uppy.on('complete', this.handleComplete);\n    this.uppy.on('error', this.handleError);\n    this.uppy.on('cancel-all', this.handleCancelAll);\n  }\n\n  private getHeaders(): Record<string, string> {\n    return {\n      Authorization: `Bearer ${this.root?.token || ''}`,\n      'x-jwt-token': this.root?.token || '',\n    };\n  }\n\n  private parseFileSize(size: string): number | null {\n    if (!size) return null;\n\n    const units: Record<string, number> = {\n      B: 1,\n      KB: 1024,\n      MB: 1024 * 1024,\n      GB: 1024 * 1024 * 1024,\n    };\n\n    const match = size.match(/^(\\d+(?:\\.\\d+)?)\\s*([gkmt]?b)$/i);\n    if (!match) return null;\n\n    const value = Number.parseFloat(match[1]);\n    const unit = match[2].toUpperCase();\n\n    return value * (units[unit] || 1);\n  }\n\n  private parseFilePattern(pattern: string): string[] | null {\n    if (!pattern || pattern === '*') return null;\n\n    return pattern.split(',').map((p) => {\n      const trimmed = p.trim();\n      if (trimmed.startsWith('*.')) {\n        return `.${trimmed.substring(2)}`;\n      }\n      return trimmed;\n    });\n  }\n\n  getValue(): any {\n    return this.dataValue;\n  }\n\n  setValue(value: any) {\n    this.dataValue = value;\n  }\n\n  detach() {\n    if (this.uppy) {\n      // P1-T2: Remove all event listeners to prevent memory leaks\n      if (this.handleFileAdded) this.uppy.off('file-added', this.handleFileAdded);\n      if (this.handleUpload) this.uppy.off('upload', this.handleUpload);\n      if (this.handleUploadProgress) this.uppy.off('upload-progress', this.handleUploadProgress);\n      if (this.handleUploadSuccess) this.uppy.off('upload-success', this.handleUploadSuccess);\n      if (this.handleUploadError) this.uppy.off('upload-error', this.handleUploadError);\n      if (this.handleComplete) this.uppy.off('complete', this.handleComplete);\n      if (this.handleError) this.uppy.off('error', this.handleError);\n      if (this.handleCancelAll) this.uppy.off('cancel-all', this.handleCancelAll);\n\n      this.uppy.cancelAll(); // Cancel all uploads (close() removed in Uppy v3+)\n      this.uppy = null;\n    }\n    return super.detach();\n  }\n\n  destroy() {\n    if (this.uppy) {\n      // P1-T2: Remove all event listeners to prevent memory leaks\n      if (this.handleFileAdded) this.uppy.off('file-added', this.handleFileAdded);\n      if (this.handleUpload) this.uppy.off('upload', this.handleUpload);\n      if (this.handleUploadProgress) this.uppy.off('upload-progress', this.handleUploadProgress);\n      if (this.handleUploadSuccess) this.uppy.off('upload-success', this.handleUploadSuccess);\n      if (this.handleUploadError) this.uppy.off('upload-error', this.handleUploadError);\n      if (this.handleComplete) this.uppy.off('complete', this.handleComplete);\n      if (this.handleError) this.uppy.off('error', this.handleError);\n      if (this.handleCancelAll) this.uppy.off('cancel-all', this.handleCancelAll);\n\n      this.uppy.cancelAll(); // Cancel all uploads (close() removed in Uppy v3+)\n      this.uppy = null;\n    }\n    super.destroy();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/components/UppyFileUpload/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/config/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/config/whitelabel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/providers/FileStorageProvider.ts","messages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Function Call Object Injection Sink","line":35,"column":45,"nodeType":"MemberExpression","endLine":35,"endColumn":66},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":42,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":42,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1151,1153],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":67,"column":34,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":67,"endColumn":43},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":80,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":80,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2034,2036],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":97,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":97,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2434,2436],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":110,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":110,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":110,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":110,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'Formio' should be typed with a non-any type.","line":110,"column":19,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":110,"endColumn":30}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * File Storage Provider for Form.io\n *\n * Abstract provider interface for different storage backends\n */\n\nimport type { StorageProvider, UploadFile } from '../types';\n\nexport default class FileStorageProvider implements StorageProvider {\n  name = 'file';\n  title = 'File Storage Provider';\n\n  private config: any;\n\n  constructor(config: any = {}) {\n    this.config = {\n      endpoint: '/files',\n      ...config\n    };\n  }\n\n  async uploadFile(file: File, options: any = {}): Promise<UploadFile> {\n    // This is the base implementation that would be overridden\n    // by specific storage providers (GCS, S3, Azure, etc.)\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('name', file.name);\n    formData.append('size', file.size.toString());\n    formData.append('type', file.type);\n\n    // Add metadata\n    if (options.metadata) {\n      for (const key of Object.keys(options.metadata)) {\n        formData.append(`metadata[${key}]`, options.metadata[key]);\n      }\n    }\n\n    const response = await fetch(this.config.endpoint, {\n      method: 'POST',\n      headers: {\n        'x-jwt-token': options.token || ''\n      },\n      body: formData\n    });\n\n    if (!response.ok) {\n      throw new Error(`Upload failed: ${response.statusText}`);\n    }\n\n    const result = await response.json();\n\n    return {\n      id: result.id,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      url: result.url,\n      storage: 'file',\n      status: 'completed',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    } as UploadFile;\n  }\n\n  async downloadFile(file: UploadFile): Promise<Blob> {\n    const response = await fetch(file.url!);\n\n    if (!response.ok) {\n      throw new Error(`Download failed: ${response.statusText}`);\n    }\n\n    return response.blob();\n  }\n\n  async deleteFile(file: UploadFile): Promise<void> {\n    const response = await fetch(`${this.config.endpoint}/${file.id}`, {\n      method: 'DELETE',\n      headers: {\n        'x-jwt-token': this.config.token || ''\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Delete failed: ${response.statusText}`);\n    }\n  }\n\n  async getFileUrl(file: UploadFile): Promise<string> {\n    // Generate signed URL if needed\n    if (file.url) {\n      return file.url;\n    }\n\n    const response = await fetch(`${this.config.endpoint}/${file.id}/url`, {\n      headers: {\n        'x-jwt-token': this.config.token || ''\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get file URL: ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    return result.url;\n  }\n\n  // Static factory method for Form.io provider registration\n  static register(Formio: any) {\n    Formio.Providers.addProvider('storage', 'file', FileStorageProvider);\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/providers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/templates/index.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'framework' is assigned a value but never used. Allowed unused args must match /^_/u.","line":7,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'framework' is assigned a value but never used.","line":7,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"framework"},"fix":{"range":[163,192],"text":""},"desc":"Remove unused variable 'framework'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":21,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":134,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":134,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Template registration for file upload components\n *\n * Provides clean, framework-agnostic templates with minimal CSS\n */\n\nexport function registerTemplates(framework: string = 'default') {\n  const templates: Record<string, any> = {};\n\n  // All frameworks use clean, vanilla HTML/CSS templates\n  templates.tusupload = {\n    form: getTusTemplate()\n  };\n  templates.uppyupload = {\n    form: getUppyTemplate()\n  };\n\n  return templates;\n}\n\nfunction getTusTemplate() {\n  return `\n<div class=\"tus-upload-component\">\n  <style>\n    .tus-upload-component { margin: 1rem 0; font-family: system-ui, -apple-system, sans-serif; }\n    .tus-upload-component label { display: block; margin-bottom: 0.5rem; font-weight: 500; }\n    .upload-dropzone {\n      border: 2px dashed #ccc;\n      border-radius: 8px;\n      padding: 2rem;\n      text-align: center;\n      background: #fafafa;\n      transition: all 0.2s;\n    }\n    .upload-dropzone:hover { border-color: #666; background: #f0f0f0; }\n    .upload-dropzone.dragover { border-color: #4CAF50; background: #e8f5e9; }\n    .upload-icon { font-size: 3rem; color: #999; margin-bottom: 1rem; }\n    .browse-button {\n      background: #2196F3;\n      color: white;\n      border: none;\n      padding: 0.75rem 1.5rem;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 1rem;\n    }\n    .browse-button:hover { background: #1976D2; }\n    .file-input { display: none; }\n    .file-list { margin-top: 1rem; }\n    .file-item {\n      display: flex;\n      align-items: center;\n      padding: 0.75rem;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      margin-bottom: 0.5rem;\n      background: white;\n    }\n    .file-name { flex: 1; margin: 0 1rem; }\n    .file-size { color: #666; font-size: 0.875rem; }\n    .progress-bar {\n      height: 20px;\n      background: #e0e0e0;\n      border-radius: 10px;\n      overflow: hidden;\n      margin: 0 1rem;\n      flex: 1;\n    }\n    .progress-fill {\n      height: 100%;\n      background: #4CAF50;\n      transition: width 0.3s;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: white;\n      font-size: 0.75rem;\n    }\n    .remove-button {\n      background: #f44336;\n      color: white;\n      border: none;\n      padding: 0.5rem 1rem;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .remove-button:hover { background: #d32f2f; }\n    .description { display: block; margin-top: 0.5rem; font-size: 0.875rem; color: #666; }\n  </style>\n\n  <label for=\"{{ instance.id }}-{{ key }}\">{{ t(label) }}</label>\n\n  <div class=\"upload-dropzone\" ref=\"fileDrop\">\n    <div class=\"upload-icon\">📁</div>\n    <p>{{ t('Drag and drop files here or') }}</p>\n    <button type=\"button\" class=\"browse-button\" ref=\"fileBrowse\">\n      {{ t('Browse Files') }}\n    </button>\n    <input type=\"file\" class=\"file-input\" ref=\"hiddenFileInputElement\"\n      {% if (multiple) { %}multiple{% } %}\n      {% if (filePattern && filePattern !== '*') { %}accept=\"{{ filePattern }}\"{% } %} />\n  </div>\n\n  <div class=\"file-list\" ref=\"fileList\">\n    {% if (files && files.length) { %}\n      {% files.forEach(function(file, index) { %}\n        <div class=\"file-item\">\n          <span>📄</span>\n          <span class=\"file-name\">{{ file.name }}</span>\n          <span class=\"file-size\">{{ formatBytes(file.size) }}</span>\n          {% if (file.progress && file.progress < 100) { %}\n            <div class=\"progress-bar\">\n              <div class=\"progress-fill\" ref=\"fileProgress\" style=\"width: {{ file.progress }}%\">\n                {{ file.progress }}%\n              </div>\n            </div>\n          {% } %}\n          {% if (file.status === 'completed') { %}\n            <span style=\"color: #4CAF50;\">✓</span>\n          {% } %}\n          <button type=\"button\" class=\"remove-button\" ref=\"removeLink\">×</button>\n        </div>\n      {% }); %}\n    {% } %}\n  </div>\n\n  {% if (description) { %}\n    <small class=\"description\">{{ t(description) }}</small>\n  {% } %}\n</div>\n  `;\n}\n\nfunction getUppyTemplate() {\n  return `\n<div class=\"uppy-upload-component\">\n  <style>\n    .uppy-upload-component { margin: 1rem 0; font-family: system-ui, -apple-system, sans-serif; }\n    .uppy-upload-component label { display: block; margin-bottom: 0.5rem; font-weight: 500; }\n    .uppy-dashboard-container {\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      overflow: hidden;\n    }\n    .description { display: block; margin-top: 0.5rem; font-size: 0.875rem; color: #666; }\n  </style>\n\n  <label for=\"{{ instance.id }}-{{ key }}\">{{ t(label) }}</label>\n\n  <div class=\"uppy-dashboard-container\"></div>\n\n  {% if (description) { %}\n    <small class=\"description\">{{ t(description) }}</small>\n  {% } %}\n</div>\n  `;\n}","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/test-setup.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages/formio-file-upload/src/test-setup.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test setup file for Jest\n *\n * Optimized for parallel test execution:\n * - Minimal global setup\n * - Fast mock initialization\n * - Test isolation support\n */\n\n// ==========================================\n// PERFORMANCE OPTIMIZATIONS\n// ==========================================\n\n// Use faster mock implementations\n// Avoid complex logic in global scope\n\n// Polyfill TextEncoder/TextDecoder for JSDOM environment\n// JSDOM doesn't provide these but Node.js does\nimport { TextEncoder, TextDecoder } from 'util';\n\nif (typeof global.TextEncoder === 'undefined') {\n  global.TextEncoder = TextEncoder as any;\n}\n\nif (typeof global.TextDecoder === 'undefined') {\n  global.TextDecoder = TextDecoder as any;\n}\n\n// Mock Blob class (base for File)\nclass MockBlob {\n  constructor(\n    public bits: BlobPart[],\n    public options?: BlobPropertyBag\n  ) {}\n\n  get size(): number {\n    return this.bits.reduce((acc, bit) => {\n      if (typeof bit === 'string') return acc + bit.length;\n      if (bit instanceof ArrayBuffer) return acc + bit.byteLength;\n      if (bit instanceof Uint8Array) return acc + bit.byteLength;\n      if ((bit as any).bits) return acc + (bit as any).size; // MockBlob/MockFile\n      return acc;\n    }, 0);\n  }\n\n  get type(): string {\n    return this.options?.type || 'application/octet-stream';\n  }\n\n  private toUint8Array(): Uint8Array {\n    // Calculate total size first\n    let totalSize = 0;\n    const arrays: Uint8Array[] = [];\n\n    for (const bit of this.bits) {\n      if (bit instanceof Uint8Array) {\n        arrays.push(bit);\n        totalSize += bit.byteLength;\n      } else if (bit instanceof ArrayBuffer) {\n        const arr = new Uint8Array(bit);\n        arrays.push(arr);\n        totalSize += arr.byteLength;\n      } else if (typeof bit === 'string') {\n        const arr = new TextEncoder().encode(bit);\n        arrays.push(arr);\n        totalSize += arr.byteLength;\n      } else if ((bit as any).bits) {\n        // MockBlob/MockFile\n        const arr = (bit as any).toUint8Array() as Uint8Array;\n        arrays.push(arr);\n        totalSize += arr.byteLength;\n      }\n    }\n\n    // Efficiently concatenate all arrays\n    const result = new Uint8Array(totalSize);\n    let offset = 0;\n    for (const arr of arrays) {\n      result.set(arr, offset);\n      offset += arr.byteLength;\n    }\n\n    return result;\n  }\n\n  slice(start: number = 0, end?: number, contentType?: string): Blob {\n    const fullArray = this.toUint8Array();\n    const slicedArray = fullArray.slice(start, end);\n\n    return new MockBlob([slicedArray.buffer], {\n      type: contentType || this.type,\n    }) as any;\n  }\n\n  async arrayBuffer(): Promise<ArrayBuffer> {\n    const uint8 = this.toUint8Array();\n    // Create a new ArrayBuffer copy\n    const buffer = new ArrayBuffer(uint8.byteLength);\n    const view = new Uint8Array(buffer);\n    view.set(uint8);\n    return buffer;\n  }\n\n  async text(): Promise<string> {\n    const buffer = await this.arrayBuffer();\n    return new TextDecoder().decode(buffer);\n  }\n}\n\n// Mock File class (extends Blob)\nclass MockFile extends MockBlob {\n  constructor(\n    bits: BlobPart[],\n    public name: string,\n    options?: FilePropertyBag\n  ) {\n    super(bits, options);\n  }\n}\n\n// Assign to global\nglobal.Blob = MockBlob as any;\nglobal.File = MockFile as any;\n\nglobal.FormData = class FormData {\n  private data = new Map();\n\n  append(key: string, value: any) {\n    this.data.set(key, value);\n  }\n\n  get(key: string) {\n    return this.data.get(key);\n  }\n} as any;\n\n// Mock fetch for testing (create fresh mock per test via beforeEach)\nglobal.fetch = jest.fn();\n\n// Mock localStorage (optimized with Map for faster access)\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\n\nglobal.localStorage = localStorageMock as any;\n\n// ==========================================\n// TEST ISOLATION\n// ==========================================\n\n// Clear all mocks before each test\n// This is now handled by jest.config.parallel.js:\n// - clearMocks: true\n// - resetMocks: true\n// - restoreMocks: true\n\n// ==========================================\n// PERFORMANCE MONITORING (Optional)\n// ==========================================\n\n// Track slow tests in development\nif (process.env.TRACK_PERF) {\n  let testStartTime: number;\n\n  beforeEach(() => {\n    testStartTime = performance.now();\n  });\n\n  afterEach(() => {\n    const duration = performance.now() - testStartTime;\n    if (duration > 1000) {\n      // Tests taking >1s\n      console.warn(`⚠️  Slow test detected: ${duration.toFixed(0)}ms`);\n    }\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/utils/logger.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[874,909],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1043,1079],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Production-safe logger for Form.io file upload components\n *\n * Features:\n * - Environment-aware (only logs in development)\n * - Structured logging with metadata\n * - Prepares for production monitoring integration\n */\n\nconst isDevelopment = typeof process !== 'undefined' && process.env.NODE_ENV === 'development';\n\nexport interface LogMetadata {\n  [key: string]: any;\n}\n\nexport const logger = {\n  /**\n   * Log error messages\n   */\n  error: (msg: string, meta?: LogMetadata): void => {\n    if (isDevelopment) {\n      console.error(`[ERROR] ${msg}`, meta);\n    }\n  },\n\n  /**\n   * Log warning messages\n   */\n  warn: (msg: string, meta?: LogMetadata): void => {\n    if (isDevelopment) {\n      console.warn(`[WARN] ${msg}`, meta);\n    }\n  },\n\n  /**\n   * Log informational messages\n   */\n  info: (msg: string, meta?: LogMetadata): void => {\n    if (isDevelopment) {\n      console.log(`[INFO] ${msg}`, meta);\n    }\n  },\n\n  /**\n   * Log debug messages\n   */\n  debug: (msg: string, meta?: LogMetadata): void => {\n    if (isDevelopment) {\n      console.log(`[DEBUG] ${msg}`, meta);\n    }\n  },\n};\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/validators/fileIntegrity.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages/formio-file-upload/src/validators/fileIntegrity.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * File Integrity Validator Tests\n *\n * Tests cover:\n * - Basic checksum calculation\n * - Streaming large files\n * - Integrity validation (match/mismatch)\n * - Multiple file processing\n * - Form.io validator integration\n * - Performance benchmarks\n */\n\nimport { describe, it, expect, beforeAll } from '@jest/globals';\nimport {\n  calculateFileChecksum,\n  validateFileIntegrity,\n  calculateMultipleChecksums,\n  fileIntegrityValidator,\n  addChecksumMetadata,\n} from './fileIntegrity';\n\n// Mock File API for testing\nclass MockFile extends Blob {\n  name: string;\n  lastModified: number;\n\n  constructor(bits: BlobPart[], name: string, options?: FilePropertyBag) {\n    super(bits, options);\n    this.name = name;\n    this.lastModified = options?.lastModified || Date.now();\n  }\n}\n\n// @ts-ignore - Mock File for testing\nglobal.File = MockFile as any;\n\ndescribe('fileIntegrity - xxHash Checksum Validation', () => {\n  describe('calculateFileChecksum', () => {\n    it('should calculate checksum for small file', async () => {\n      const file = new File(['Hello World'], 'test.txt', { type: 'text/plain' });\n      const result = await calculateFileChecksum(file);\n\n      console.log('DEBUG: Result =', JSON.stringify(result, null, 2));\n      expect(result.valid).toBe(true);\n      expect(result.checksum).toBeTruthy();\n      expect(result.checksum.length).toBeGreaterThan(0);\n      expect(result.size).toBe(11); // \"Hello World\" length\n      expect(result.processingTime).toBeGreaterThanOrEqual(0);\n      expect(result.error).toBeUndefined();\n    });\n\n    it('should generate same checksum for identical content', async () => {\n      const file1 = new File(['Same Content'], 'file1.txt');\n      const file2 = new File(['Same Content'], 'file2.txt');\n\n      const result1 = await calculateFileChecksum(file1);\n      const result2 = await calculateFileChecksum(file2);\n\n      expect(result1.checksum).toBe(result2.checksum);\n    });\n\n    it('should generate different checksums for different content', async () => {\n      const file1 = new File(['Content A'], 'file1.txt');\n      const file2 = new File(['Content B'], 'file2.txt');\n\n      const result1 = await calculateFileChecksum(file1);\n      const result2 = await calculateFileChecksum(file2);\n\n      expect(result1.checksum).not.toBe(result2.checksum);\n    });\n\n    it('should handle empty file', async () => {\n      const file = new File([], 'empty.txt');\n      const result = await calculateFileChecksum(file);\n\n      expect(result.valid).toBe(true);\n      expect(result.checksum).toBeTruthy();\n      expect(result.size).toBe(0);\n    });\n\n    it('should handle large file with streaming', async () => {\n      // Create 1MB file\n      const largeData = new Uint8Array(1024 * 1024).fill(65); // 1MB of 'A'\n      const file = new File([largeData], 'large.bin');\n\n      const result = await calculateFileChecksum(file, {\n        chunkSize: 64 * 1024, // 64KB chunks\n        enableLogging: false,\n      });\n\n      expect(result.valid).toBe(true);\n      expect(result.size).toBe(1024 * 1024);\n      expect(result.checksum).toBeTruthy();\n    });\n\n    it('should calculate checksum with custom chunk size', async () => {\n      const file = new File(['0123456789'.repeat(1000)], 'test.txt');\n\n      const result = await calculateFileChecksum(file, {\n        chunkSize: 100, // Small chunks\n      });\n\n      expect(result.valid).toBe(true);\n      expect(result.checksum).toBeTruthy();\n    });\n  });\n\n  describe('validateFileIntegrity', () => {\n    it('should validate file with correct checksum', async () => {\n      const file = new File(['Test Content'], 'test.txt');\n\n      // First calculate the checksum\n      const checksumResult = await calculateFileChecksum(file);\n\n      // Then validate against it\n      const validationResult = await validateFileIntegrity(file, {\n        expectedChecksum: checksumResult.checksum,\n      });\n\n      expect(validationResult.valid).toBe(true);\n      expect(validationResult.error).toBeUndefined();\n    });\n\n    it('should fail validation with incorrect checksum', async () => {\n      const file = new File(['Test Content'], 'test.txt');\n\n      const result = await validateFileIntegrity(file, {\n        expectedChecksum: 'incorrect_checksum_12345',\n      });\n\n      expect(result.valid).toBe(false);\n      expect(result.error).toContain('Checksum mismatch');\n    });\n\n    it('should be case-insensitive when comparing checksums', async () => {\n      const file = new File(['Test Content'], 'test.txt');\n\n      const checksumResult = await calculateFileChecksum(file);\n      const uppercaseChecksum = checksumResult.checksum.toUpperCase();\n\n      const validationResult = await validateFileIntegrity(file, {\n        expectedChecksum: uppercaseChecksum,\n      });\n\n      expect(validationResult.valid).toBe(true);\n    });\n\n    it('should throw error if expectedChecksum is missing', async () => {\n      const file = new File(['Test'], 'test.txt');\n\n      await expect(validateFileIntegrity(file, {})).rejects.toThrow('expectedChecksum is required');\n    });\n\n    it('should detect file corruption', async () => {\n      const originalFile = new File(['Original Content'], 'file.txt');\n      const corruptedFile = new File(['Corrupted Content'], 'file.txt');\n\n      const originalChecksum = await calculateFileChecksum(originalFile);\n      const validationResult = await validateFileIntegrity(corruptedFile, {\n        expectedChecksum: originalChecksum.checksum,\n      });\n\n      expect(validationResult.valid).toBe(false);\n      expect(validationResult.error).toContain('mismatch');\n    });\n  });\n\n  describe('calculateMultipleChecksums', () => {\n    it('should calculate checksums for multiple files in parallel', async () => {\n      const files = [\n        new File(['File 1'], 'file1.txt'),\n        new File(['File 2'], 'file2.txt'),\n        new File(['File 3'], 'file3.txt'),\n      ];\n\n      const results = await calculateMultipleChecksums(files);\n\n      expect(results).toHaveLength(3);\n      results.forEach((result) => {\n        expect(result.valid).toBe(true);\n        expect(result.checksum).toBeTruthy();\n      });\n\n      // All checksums should be different\n      const checksums = results.map((r) => r.checksum);\n      const uniqueChecksums = new Set(checksums);\n      expect(uniqueChecksums.size).toBe(3);\n    });\n\n    it('should handle empty file array', async () => {\n      const results = await calculateMultipleChecksums([]);\n      expect(results).toEqual([]);\n    });\n\n    it('should process large number of files efficiently', async () => {\n      const files = Array.from({ length: 50 }, (_, i) => new File([`File ${i}`], `file${i}.txt`));\n\n      const startTime = performance.now();\n      const results = await calculateMultipleChecksums(files);\n      const duration = performance.now() - startTime;\n\n      expect(results).toHaveLength(50);\n      expect(duration).toBeLessThan(5000); // Should complete in under 5 seconds\n    });\n  });\n\n  describe('fileIntegrityValidator - Form.io integration', () => {\n    it('should return true if validation is disabled', async () => {\n      const context = {\n        component: { validateChecksum: false },\n        value: new File(['Test'], 'test.txt'),\n      };\n\n      const result = await fileIntegrityValidator(context);\n      expect(result).toBe(true);\n    });\n\n    it('should return true if no value provided', async () => {\n      const context = {\n        component: { validateChecksum: true },\n        value: null,\n      };\n\n      const result = await fileIntegrityValidator(context);\n      expect(result).toBe(true);\n    });\n\n    it('should validate file with checksum metadata', async () => {\n      const file = new File(['Test'], 'test.txt');\n      const checksumResult = await calculateFileChecksum(file);\n\n      const fileWithChecksum = Object.assign(file, {\n        checksum: checksumResult.checksum,\n      });\n\n      const context = {\n        component: { validateChecksum: true },\n        value: fileWithChecksum,\n      };\n\n      const result = await fileIntegrityValidator(context);\n      expect(result).toBe(true);\n    });\n\n    it('should return error if file missing checksum', async () => {\n      const file = new File(['Test'], 'test.txt');\n\n      const context = {\n        component: { validateChecksum: true },\n        value: file,\n      };\n\n      const result = await fileIntegrityValidator(context);\n      expect(typeof result).toBe('string');\n      expect(result).toContain('missing checksum');\n    });\n\n    it('should validate array of files', async () => {\n      const file1 = new File(['File 1'], 'file1.txt');\n      const file2 = new File(['File 2'], 'file2.txt');\n\n      const checksum1 = await calculateFileChecksum(file1);\n      const checksum2 = await calculateFileChecksum(file2);\n\n      const filesWithChecksums = [\n        Object.assign(file1, { checksum: checksum1.checksum }),\n        Object.assign(file2, { checksum: checksum2.checksum }),\n      ];\n\n      const context = {\n        component: { validateChecksum: true },\n        value: filesWithChecksums,\n      };\n\n      const result = await fileIntegrityValidator(context);\n      expect(result).toBe(true);\n    });\n\n    it('should fail validation if any file has incorrect checksum', async () => {\n      const file = new File(['Test'], 'test.txt');\n      const fileWithBadChecksum = Object.assign(file, {\n        checksum: 'wrong_checksum_12345',\n      });\n\n      const context = {\n        component: { validateChecksum: true },\n        value: fileWithBadChecksum,\n      };\n\n      const result = await fileIntegrityValidator(context);\n      expect(typeof result).toBe('string');\n      expect(result).toContain('integrity check failed');\n    });\n  });\n\n  describe('addChecksumMetadata', () => {\n    it('should add checksum metadata to file', async () => {\n      const file = new File(['Test Content'], 'test.txt');\n      const fileWithChecksum = await addChecksumMetadata(file);\n\n      expect(fileWithChecksum.checksum).toBeTruthy();\n      expect(fileWithChecksum.checksumAlgorithm).toBe('xxh64');\n      expect(fileWithChecksum.checksumProcessingTime).toBeGreaterThanOrEqual(0);\n      expect(fileWithChecksum.name).toBe('test.txt');\n      expect(fileWithChecksum.size).toBe(file.size);\n    });\n\n    it('should preserve original file properties', async () => {\n      const file = new File(['Content'], 'original.pdf', { type: 'application/pdf' });\n      const fileWithChecksum = await addChecksumMetadata(file);\n\n      expect(fileWithChecksum.name).toBe('original.pdf');\n      expect(fileWithChecksum.type).toBe('application/pdf');\n      expect(fileWithChecksum.size).toBe(7);\n    });\n  });\n\n  describe('Performance benchmarks', () => {\n    it('should be fast for small files (< 1ms)', async () => {\n      const file = new File(['Small file content'], 'small.txt');\n\n      const startTime = performance.now();\n      const result = await calculateFileChecksum(file);\n      const duration = performance.now() - startTime;\n\n      expect(result.valid).toBe(true);\n      expect(duration).toBeLessThan(10); // Should be very fast\n    });\n\n    it('should process 10MB file efficiently', async () => {\n      // Create 10MB file\n      const largeData = new Uint8Array(10 * 1024 * 1024).fill(42);\n      const file = new File([largeData], 'large.bin');\n\n      const startTime = performance.now();\n      const result = await calculateFileChecksum(file, {\n        enableLogging: true,\n      });\n      const duration = performance.now() - startTime;\n\n      expect(result.valid).toBe(true);\n      expect(result.size).toBe(10 * 1024 * 1024);\n\n      // Should process at least 50 MB/s (conservative estimate)\n      const throughputMBps = result.size / 1024 / 1024 / (duration / 1000);\n      expect(throughputMBps).toBeGreaterThan(50);\n    });\n  });\n\n  describe('Edge cases', () => {\n    it('should handle binary data', async () => {\n      const binaryData = new Uint8Array([0x00, 0xff, 0xaa, 0x55]);\n      const file = new File([binaryData], 'binary.bin');\n\n      const result = await calculateFileChecksum(file);\n      expect(result.valid).toBe(true);\n    });\n\n    it('should handle Unicode content', async () => {\n      const unicodeContent = '你好世界 🌍 Hello मस्ते';\n      const file = new File([unicodeContent], 'unicode.txt');\n\n      const result = await calculateFileChecksum(file);\n      expect(result.valid).toBe(true);\n    });\n\n    it('should handle Blob instead of File', async () => {\n      const blob = new Blob(['Blob content'], { type: 'text/plain' });\n      const result = await calculateFileChecksum(blob);\n\n      expect(result.valid).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/validators/fileIntegrity.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":30,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":30,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":31,"column":3,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":33,"endColumn":4,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[882,931],"text":"hashAPI ??= await xxhash();"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"no-undef","severity":2,"message":"'performance' is not defined.","line":81,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":81,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'performance' is not defined.","line":104,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":104,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'performance' is not defined.","line":124,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":124,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Argument 'context' should be typed with a non-any type.","line":210,"column":46,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":210,"endColumn":58},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":221,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":221,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5892,5894],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":229,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":229,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6103,6105],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * File Integrity Validator using xxHash (xxh64)\n *\n * WHY xxHash instead of SHA-256:\n * - Speed: 50x faster than SHA-256 (0.5s vs 27s for 6.6GB file)\n * - Performance: ~400 MB/s throughput with WebAssembly\n * - Use Case: Detects accidental corruption (not cryptographic security)\n * - Platform: Works in both browser (WASM) and Node.js\n *\n * Research Sources:\n * - https://xxhash.com/\n * - https://github.com/jungomi/xxhash-wasm\n * - Production usage: Cloudflare Workers, Astro, RSSHub, grpc-node\n */\n\nimport xxhash from 'xxhash-wasm';\n\nimport { logger } from '../utils/logger';\n\n/**\n * Singleton xxHash API instance for performance\n * Lazy-loaded on first use to avoid blocking app startup\n */\nlet hashAPI: Awaited<ReturnType<typeof xxhash>> | null = null;\n\n/**\n * Initialize xxHash WASM module\n * Automatically caches for subsequent calls\n */\nasync function getHashAPI() {\n  if (!hashAPI) {\n    hashAPI = await xxhash();\n  }\n  return hashAPI;\n}\n\n/**\n * File integrity result\n */\nexport interface FileIntegrityResult {\n  /** Whether the file passed integrity validation */\n  valid: boolean;\n  /** xxHash checksum (hex string) */\n  checksum: string;\n  /** File size in bytes */\n  size: number;\n  /** Processing time in milliseconds */\n  processingTime: number;\n  /** Error message if validation failed */\n  error?: string;\n}\n\n/**\n * Options for file integrity checking\n */\nexport interface FileIntegrityOptions {\n  /** Expected checksum (if validating against known value) */\n  expectedChecksum?: string;\n  /** Chunk size for streaming large files (default: 64KB) */\n  chunkSize?: number;\n  /** Enable performance logging */\n  enableLogging?: boolean;\n}\n\n/**\n * Calculate xxHash checksum for a File or Blob\n *\n * Uses streaming API for memory efficiency with large files\n *\n * @example\n * ```typescript\n * const result = await calculateFileChecksum(file);\n * console.log(`Checksum: ${result.checksum}`);\n * console.log(`Time: ${result.processingTime}ms for ${result.size} bytes`);\n * ```\n */\nexport async function calculateFileChecksum(\n  file: File | Blob,\n  options: FileIntegrityOptions = {}\n): Promise<FileIntegrityResult> {\n  const startTime = performance.now();\n  const { chunkSize = 64 * 1024, enableLogging = false } = options;\n\n  try {\n    const api = await getHashAPI();\n    const hasher = api.create64();\n\n    // Stream file in chunks for memory efficiency\n    let offset = 0;\n    const fileSize = file.size;\n\n    while (offset < fileSize) {\n      const chunk = file.slice(offset, Math.min(offset + chunkSize, fileSize));\n      const arrayBuffer = await chunk.arrayBuffer();\n      const uint8Array = new Uint8Array(arrayBuffer);\n\n      hasher.update(uint8Array);\n      offset += chunkSize;\n    }\n\n    // digest() returns bigint, convert to hex string manually\n    const checksumBigInt = hasher.digest();\n    const checksum = checksumBigInt.toString(16).padStart(16, '0');\n    const processingTime = performance.now() - startTime;\n\n    if (enableLogging && process.env.NODE_ENV !== 'production') {\n      const throughput = fileSize / 1024 / 1024 / (processingTime / 1000);\n      logger.info(\n        `[xxHash] Processed ${(fileSize / 1024 / 1024).toFixed(2)} MB in ${processingTime.toFixed(2)}ms (~${throughput.toFixed(2)} MB/s)`\n      );\n    }\n\n    return {\n      valid: true,\n      checksum,\n      size: fileSize,\n      processingTime,\n    };\n  } catch (error) {\n    return {\n      valid: false,\n      checksum: '',\n      size: file.size,\n      processingTime: performance.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Validate file integrity against expected checksum\n *\n * @example\n * ```typescript\n * const result = await validateFileIntegrity(file, {\n *   expectedChecksum: 'abc123...'\n * });\n *\n * if (result.valid) {\n *   console.log('File integrity verified!');\n * } else {\n *   console.error('Integrity check failed:', result.error);\n * }\n * ```\n */\nexport async function validateFileIntegrity(\n  file: File | Blob,\n  options: FileIntegrityOptions\n): Promise<FileIntegrityResult> {\n  const { expectedChecksum } = options;\n\n  if (!expectedChecksum) {\n    throw new Error('expectedChecksum is required for validation');\n  }\n\n  const result = await calculateFileChecksum(file, options);\n\n  if (!result.valid) {\n    return result; // Return error from checksum calculation\n  }\n\n  // Compare checksums (case-insensitive)\n  const checksumMatch = result.checksum.toLowerCase() === expectedChecksum.toLowerCase();\n\n  if (!checksumMatch) {\n    return {\n      ...result,\n      valid: false,\n      error: `Checksum mismatch: expected ${expectedChecksum}, got ${result.checksum}`,\n    };\n  }\n\n  return result;\n}\n\n/**\n * Calculate checksums for multiple files in parallel\n *\n * @example\n * ```typescript\n * const results = await calculateMultipleChecksums(files);\n * results.forEach((result, index) => {\n *   console.log(`File ${index}: ${result.checksum}`);\n * });\n * ```\n */\nexport async function calculateMultipleChecksums(\n  files: (File | Blob)[],\n  options: FileIntegrityOptions = {}\n): Promise<FileIntegrityResult[]> {\n  // Process files in parallel for maximum performance\n  return Promise.all(files.map((file) => calculateFileChecksum(file, options)));\n}\n\n/**\n * Form.io validator integration\n *\n * Validates file integrity as part of form submission\n *\n * @example\n * ```typescript\n * // In Form.io component configuration\n * {\n *   validate: {\n *     custom: 'valid = await fileIntegrityValidator(input)'\n *   }\n * }\n * ```\n */\nexport async function fileIntegrityValidator(context: any): Promise<boolean | string> {\n  const { component, value } = context;\n\n  if (!value || !component.validateChecksum) {\n    return true; // Skip validation if not enabled\n  }\n\n  const files = Array.isArray(value) ? value : [value];\n\n  for (const file of files) {\n    if (!file.checksum) {\n      return `File ${file.name || 'unknown'} is missing checksum metadata`;\n    }\n\n    const result = await validateFileIntegrity(file, {\n      expectedChecksum: file.checksum,\n    });\n\n    if (!result.valid) {\n      return `File ${file.name || 'unknown'} integrity check failed: ${result.error}`;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Generate checksum metadata for file upload\n *\n * Adds checksum to file object for later validation\n *\n * @example\n * ```typescript\n * const fileWithChecksum = await addChecksumMetadata(file);\n * // fileWithChecksum now has .checksum property\n * ```\n */\nexport async function addChecksumMetadata(\n  file: File,\n  options: FileIntegrityOptions = {}\n): Promise<File & { checksum: string; checksumAlgorithm: string }> {\n  const result = await calculateFileChecksum(file, options);\n\n  if (!result.valid) {\n    throw new Error(`Failed to calculate checksum: ${result.error}`);\n  }\n\n  // Attach checksum metadata to file object\n  return Object.assign(file, {\n    checksum: result.checksum,\n    checksumAlgorithm: 'xxh64',\n    checksumProcessingTime: result.processingTime,\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/validators/index.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":10,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":10,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":22,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":22,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":46,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":46,"endColumn":27},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":66,"column":51,"nodeType":"NewExpression","endLine":66,"endColumn":89},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":83,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":83,"endColumn":34},{"ruleId":"sonarjs/prefer-single-boolean-return","severity":1,"message":"Replace this if-then-else flow by a single return statement.","line":86,"column":3,"nodeType":"IfStatement","messageId":"replaceIfThenElseByReturn","endLine":88,"endColumn":4,"suggestions":[{"messageId":"suggestCast","fix":{"range":[2153,2326],"text":"return !!(!value || !component.virusScan);"},"desc":"Replace with single return statement using \"!!\" cast"},{"messageId":"suggestBoolean","fix":{"range":[2153,2326],"text":"return !value || !component.virusScan;"},"desc":"Replace with single return statement without cast (condition should be boolean!)"}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":98,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":98,"endColumn":34},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":133,"column":28,"nodeType":"Literal","endLine":133,"endColumn":61},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":139,"column":19,"nodeType":"MemberExpression","endLine":139,"endColumn":30}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Custom validators for file upload components\n */\n\n// Export security utilities\nexport * from './magicNumbers';\nexport * from './sanitizeFilename';\nexport * from './fileIntegrity';\n\nexport function registerValidators() {\n  return {\n    fileSize: fileSizeValidator,\n    fileType: fileTypeValidator,\n    virusScan: virusScanValidator,\n    imageResolution: imageResolutionValidator,\n  };\n}\n\n/**\n * Validate file size\n */\nfunction fileSizeValidator(context: any) {\n  const { component, value } = context;\n\n  if (!value) return true;\n\n  const files = Array.isArray(value) ? value : [value];\n  const maxSize = parseFileSize(component.fileMaxSize);\n  const minSize = parseFileSize(component.fileMinSize);\n\n  for (const file of files) {\n    if (maxSize && file.size > maxSize) {\n      return `File ${file.name} exceeds maximum size of ${component.fileMaxSize}`;\n    }\n    if (minSize && file.size < minSize) {\n      return `File ${file.name} is smaller than minimum size of ${component.fileMinSize}`;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Validate file type\n */\nfunction fileTypeValidator(context: any) {\n  const { component, value } = context;\n\n  if (!value || !component.filePattern || component.filePattern === '*') {\n    return true;\n  }\n\n  const files = Array.isArray(value) ? value : [value];\n  const allowedTypes = parseFilePattern(component.filePattern);\n\n  for (const file of files) {\n    const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\n    const fileMime = file.type;\n\n    let isAllowed = false;\n    for (const pattern of allowedTypes) {\n      if (pattern.startsWith('.') && fileExt === pattern) {\n        isAllowed = true;\n        break;\n      }\n      if (pattern.includes('/') && fileMime.match(new RegExp(pattern.replace('*', '.*')))) {\n        isAllowed = true;\n        break;\n      }\n    }\n\n    if (!isAllowed) {\n      return `File type ${fileExt} is not allowed. Allowed types: ${component.filePattern}`;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Validate virus scan (placeholder - requires server-side implementation)\n */\nasync function virusScanValidator(context: any) {\n  const { component, value } = context;\n\n  if (!value || !component.virusScan) {\n    return true;\n  }\n\n  // This would need to call a server-side virus scanning API\n  // For now, we'll just return true\n  return true;\n}\n\n/**\n * Validate image resolution\n */\nfunction imageResolutionValidator(context: any) {\n  const { component, value } = context;\n\n  if (!value || (!component.imageMinResolution && !component.imageMaxResolution)) {\n    return true;\n  }\n\n  const files = Array.isArray(value) ? value : [value];\n\n  for (const file of files) {\n    if (!file.type.startsWith('image/')) {\n      continue;\n    }\n\n    // This would need to load the image and check dimensions\n    // For now, we'll skip this validation\n  }\n\n  return true;\n}\n\n/**\n * Helper function to parse file size strings\n */\nfunction parseFileSize(size: string): number | null {\n  if (!size) return null;\n\n  const units: Record<string, number> = {\n    B: 1,\n    KB: 1024,\n    MB: 1024 * 1024,\n    GB: 1024 * 1024 * 1024,\n    TB: 1024 * 1024 * 1024 * 1024,\n  };\n\n  const match = size.match(/^(\\d+(?:\\.\\d+)?)\\s*([gkmt]?b)$/i);\n  if (!match) return null;\n\n  const value = Number.parseFloat(match[1]);\n  const unit = match[2].toUpperCase();\n\n  return value * (units[unit] || 1);\n}\n\n/**\n * Helper function to parse file patterns\n */\nfunction parseFilePattern(pattern: string): string[] {\n  if (!pattern || pattern === '*') return ['*'];\n\n  return pattern.split(',').map((p) => p.trim());\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/validators/magicNumbers.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages/formio-file-upload/src/validators/magicNumbers.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tests for magic number verification\n */\n\nimport { verifyFileType, detectFileType, FILE_SIGNATURES, hasSignatureSupport } from './magicNumbers';\n\ndescribe('magicNumbers', () => {\n  describe('verifyFileType', () => {\n    it('should verify JPEG file signature', async () => {\n      const jpegBytes = new Uint8Array([0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46]);\n      const file = new File([jpegBytes], 'test.jpg', { type: 'image/jpeg' });\n\n      const result = await verifyFileType(file, 'image/jpeg');\n      expect(result).toBe(true);\n    });\n\n    it('should verify PNG file signature', async () => {\n      const pngBytes = new Uint8Array([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);\n      const file = new File([pngBytes], 'test.png', { type: 'image/png' });\n\n      const result = await verifyFileType(file, 'image/png');\n      expect(result).toBe(true);\n    });\n\n    it('should verify GIF file signature', async () => {\n      const gifBytes = new Uint8Array([0x47, 0x49, 0x46, 0x38, 0x39, 0x61]);\n      const file = new File([gifBytes], 'test.gif', { type: 'image/gif' });\n\n      const result = await verifyFileType(file, 'image/gif');\n      expect(result).toBe(true);\n    });\n\n    it('should verify PDF file signature', async () => {\n      const pdfBytes = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34]);\n      const file = new File([pdfBytes], 'test.pdf', { type: 'application/pdf' });\n\n      const result = await verifyFileType(file, 'application/pdf');\n      expect(result).toBe(true);\n    });\n\n    it('should reject file with wrong signature', async () => {\n      // PHP file with JPEG extension\n      const phpBytes = new Uint8Array([0x3C, 0x3F, 0x70, 0x68, 0x70]); // <?php\n      const file = new File([phpBytes], 'malicious.jpg', { type: 'image/jpeg' });\n\n      const result = await verifyFileType(file, 'image/jpeg');\n      expect(result).toBe(false);\n    });\n\n    it('should handle files without signature definition', async () => {\n      const unknownBytes = new Uint8Array([0x00, 0x01, 0x02, 0x03]);\n      const file = new File([unknownBytes], 'test.txt', { type: 'text/plain' });\n\n      // Should return true (allow) when no signature defined\n      const result = await verifyFileType(file, 'text/plain');\n      expect(result).toBe(true);\n    });\n\n    it('should verify ZIP file signature', async () => {\n      const zipBytes = new Uint8Array([0x50, 0x4B, 0x03, 0x04]);\n      const file = new File([zipBytes], 'test.zip', { type: 'application/zip' });\n\n      const result = await verifyFileType(file, 'application/zip');\n      expect(result).toBe(true);\n    });\n\n    it('should handle wildcard bytes in signatures', async () => {\n      // WebP has null bytes in signature\n      const webpBytes = new Uint8Array([\n        0x52, 0x49, 0x46, 0x46,  // RIFF\n        0x00, 0x00, 0x00, 0x00,  // File size (wildcard)\n        0x57, 0x45, 0x42, 0x50   // WEBP\n      ]);\n      const file = new File([webpBytes], 'test.webp', { type: 'image/webp' });\n\n      const result = await verifyFileType(file, 'image/webp');\n      expect(result).toBe(true);\n    });\n\n    it('should fail securely on error', async () => {\n      // Simulate error by passing invalid file\n      const result = await verifyFileType(null as any, 'image/jpeg');\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('detectFileType', () => {\n    it('should detect correct MIME type from multiple options', async () => {\n      const jpegBytes = new Uint8Array([0xFF, 0xD8, 0xFF, 0xE0]);\n      const file = new File([jpegBytes], 'unknown.dat', { type: 'application/octet-stream' });\n\n      const allowedTypes = ['image/png', 'image/jpeg', 'image/gif'];\n      const detected = await detectFileType(file, allowedTypes);\n\n      expect(detected).toBe('image/jpeg');\n    });\n\n    it('should return null if no type matches', async () => {\n      const randomBytes = new Uint8Array([0x00, 0x01, 0x02, 0x03]);\n      const file = new File([randomBytes], 'unknown.dat', { type: 'application/octet-stream' });\n\n      const allowedTypes = ['image/png', 'image/jpeg'];\n      const detected = await detectFileType(file, allowedTypes);\n\n      expect(detected).toBeNull();\n    });\n\n    it('should handle empty allowed types', async () => {\n      const jpegBytes = new Uint8Array([0xFF, 0xD8, 0xFF, 0xE0]);\n      const file = new File([jpegBytes], 'test.jpg', { type: 'image/jpeg' });\n\n      const detected = await detectFileType(file, []);\n      expect(detected).toBeNull();\n    });\n  });\n\n  describe('FILE_SIGNATURES', () => {\n    it('should have signatures for common image types', () => {\n      expect(FILE_SIGNATURES['image/jpeg']).toBeDefined();\n      expect(FILE_SIGNATURES['image/png']).toBeDefined();\n      expect(FILE_SIGNATURES['image/gif']).toBeDefined();\n      expect(FILE_SIGNATURES['image/webp']).toBeDefined();\n    });\n\n    it('should have signatures for document types', () => {\n      expect(FILE_SIGNATURES['application/pdf']).toBeDefined();\n    });\n\n    it('should have signatures for archive types', () => {\n      expect(FILE_SIGNATURES['application/zip']).toBeDefined();\n      expect(FILE_SIGNATURES['application/x-rar-compressed']).toBeDefined();\n    });\n\n    it('should have proper signature structure', () => {\n      const jpeg = FILE_SIGNATURES['image/jpeg'];\n      expect(jpeg.mime).toBe('image/jpeg');\n      expect(jpeg.description).toBeTruthy();\n      expect(Array.isArray(jpeg.signatures)).toBe(true);\n      expect(jpeg.signatures.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('hasSignatureSupport', () => {\n    it('should return true for supported types', () => {\n      expect(hasSignatureSupport('image/jpeg')).toBe(true);\n      expect(hasSignatureSupport('image/png')).toBe(true);\n      expect(hasSignatureSupport('application/pdf')).toBe(true);\n    });\n\n    it('should return false for unsupported types', () => {\n      expect(hasSignatureSupport('text/plain')).toBe(false);\n      expect(hasSignatureSupport('application/json')).toBe(false);\n    });\n  });\n\n  describe('Security scenarios', () => {\n    it('should detect MIME type spoofing', async () => {\n      // Executable masquerading as image\n      const exeBytes = new Uint8Array([0x4D, 0x5A]); // MZ header (EXE)\n      const file = new File([exeBytes], 'virus.jpg', { type: 'image/jpeg' });\n\n      const result = await verifyFileType(file, 'image/jpeg');\n      expect(result).toBe(false);\n    });\n\n    it('should detect PHP file with image extension', async () => {\n      const phpBytes = new Uint8Array([0x3C, 0x3F, 0x70, 0x68, 0x70]); // <?php\n      const file = new File([phpBytes], 'shell.gif', { type: 'image/gif' });\n\n      const result = await verifyFileType(file, 'image/gif');\n      expect(result).toBe(false);\n    });\n\n    it('should accept valid image despite suspicious name', async () => {\n      const pngBytes = new Uint8Array([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);\n      const file = new File([pngBytes], 'suspicious.php.png', { type: 'image/png' });\n\n      // Signature should pass (filename sanitization is separate)\n      const result = await verifyFileType(file, 'image/png');\n      expect(result).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/validators/magicNumbers.ts","messages":[{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":159,"column":23,"nodeType":"MemberExpression","endLine":159,"endColumn":52},{"ruleId":"security/detect-object-injection","severity":2,"message":"Generic Object Injection Sink","line":210,"column":12,"nodeType":"MemberExpression","endLine":210,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":228,"column":25,"nodeType":"MemberExpression","endLine":228,"endColumn":50},{"ruleId":"security/detect-object-injection","severity":2,"message":"Variable Assigned to Object Injection Sink","line":252,"column":21,"nodeType":"MemberExpression","endLine":252,"endColumn":46}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Magic Number (File Signature) Verification\n *\n * Validates file types by inspecting actual file content (magic numbers)\n * to prevent MIME type spoofing attacks.\n *\n * Security: Prevents attackers from uploading malicious files by changing\n * the MIME type or file extension.\n */\n\nimport { logger } from '../utils/logger';\n\nexport interface FileSignature {\n  mime: string;\n  signatures: (number | null)[][];\n  description: string;\n}\n\n/**\n * File type signatures (magic numbers)\n * Each signature is an array of byte values at the start of the file\n */\nexport const FILE_SIGNATURES: Record<string, FileSignature> = {\n  // Images\n  'image/jpeg': {\n    mime: 'image/jpeg',\n    signatures: [\n      [0xff, 0xd8, 0xff, 0xdb], // JPEG raw\n      [0xff, 0xd8, 0xff, 0xe0], // JPEG JFIF\n      [0xff, 0xd8, 0xff, 0xe1], // JPEG EXIF\n      [0xff, 0xd8, 0xff, 0xe2], // JPEG still\n      [0xff, 0xd8, 0xff, 0xe3], // JPEG Samsung\n    ],\n    description: 'JPEG Image',\n  },\n  'image/png': {\n    mime: 'image/png',\n    signatures: [[0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]],\n    description: 'PNG Image',\n  },\n  'image/gif': {\n    mime: 'image/gif',\n    signatures: [\n      [0x47, 0x49, 0x46, 0x38, 0x37, 0x61], // GIF87a\n      [0x47, 0x49, 0x46, 0x38, 0x39, 0x61], // GIF89a\n    ],\n    description: 'GIF Image',\n  },\n  'image/webp': {\n    mime: 'image/webp',\n    signatures: [[0x52, 0x49, 0x46, 0x46, null, null, null, null, 0x57, 0x45, 0x42, 0x50]],\n    description: 'WebP Image',\n  },\n  'image/bmp': {\n    mime: 'image/bmp',\n    signatures: [[0x42, 0x4d]],\n    description: 'BMP Image',\n  },\n  'image/tiff': {\n    mime: 'image/tiff',\n    signatures: [\n      [0x49, 0x49, 0x2a, 0x00], // Little-endian\n      [0x4d, 0x4d, 0x00, 0x2a], // Big-endian\n    ],\n    description: 'TIFF Image',\n  },\n\n  // Documents\n  'application/pdf': {\n    mime: 'application/pdf',\n    signatures: [\n      [0x25, 0x50, 0x44, 0x46, 0x2d], // %PDF-\n    ],\n    description: 'PDF Document',\n  },\n\n  // Archives\n  'application/zip': {\n    mime: 'application/zip',\n    signatures: [\n      [0x50, 0x4b, 0x03, 0x04], // ZIP local file header\n      [0x50, 0x4b, 0x05, 0x06], // ZIP empty archive\n      [0x50, 0x4b, 0x07, 0x08], // ZIP spanned archive\n    ],\n    description: 'ZIP Archive',\n  },\n  'application/x-rar-compressed': {\n    mime: 'application/x-rar-compressed',\n    signatures: [\n      [0x52, 0x61, 0x72, 0x21, 0x1a, 0x07, 0x00], // RAR v1.5+\n      [0x52, 0x61, 0x72, 0x21, 0x1a, 0x07, 0x01, 0x00], // RAR v5.0+\n    ],\n    description: 'RAR Archive',\n  },\n  'application/x-7z-compressed': {\n    mime: 'application/x-7z-compressed',\n    signatures: [[0x37, 0x7a, 0xbc, 0xaf, 0x27, 0x1c]],\n    description: '7-Zip Archive',\n  },\n\n  // Microsoft Office (ZIP-based)\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': {\n    mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    signatures: [\n      [0x50, 0x4b, 0x03, 0x04], // ZIP (needs content inspection)\n    ],\n    description: 'Microsoft Word Document (DOCX)',\n  },\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {\n    mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    signatures: [\n      [0x50, 0x4b, 0x03, 0x04], // ZIP (needs content inspection)\n    ],\n    description: 'Microsoft Excel Spreadsheet (XLSX)',\n  },\n\n  // Video\n  'video/mp4': {\n    mime: 'video/mp4',\n    signatures: [\n      [0x00, 0x00, 0x00, null, 0x66, 0x74, 0x79, 0x70], // ftyp\n    ],\n    description: 'MP4 Video',\n  },\n  'video/webm': {\n    mime: 'video/webm',\n    signatures: [[0x1a, 0x45, 0xdf, 0xa3]],\n    description: 'WebM Video',\n  },\n\n  // Audio\n  'audio/mpeg': {\n    mime: 'audio/mpeg',\n    signatures: [\n      [0xff, 0xfb], // MP3 with MPEG-1 Layer 3\n      [0xff, 0xf3], // MP3 with MPEG-2 Layer 3\n      [0xff, 0xf2], // MP3 with MPEG-2.5 Layer 3\n      [0x49, 0x44, 0x33], // MP3 with ID3v2\n    ],\n    description: 'MP3 Audio',\n  },\n  'audio/wav': {\n    mime: 'audio/wav',\n    signatures: [[0x52, 0x49, 0x46, 0x46, null, null, null, null, 0x57, 0x41, 0x56, 0x45]],\n    description: 'WAV Audio',\n  },\n};\n\n/**\n * Verify file type by checking magic numbers\n *\n * @param file - File to verify\n * @param expectedType - Expected MIME type\n * @returns Promise<boolean> - True if file matches expected type\n */\nexport async function verifyFileType(file: File, expectedType: string): Promise<boolean> {\n  try {\n    // Get file signature from database\n    const signature = FILE_SIGNATURES[expectedType];\n\n    // If no signature defined, allow the file (fallback to MIME check only)\n    if (!signature) {\n      logger.warn(`[Security] No signature defined for MIME type: ${expectedType}`);\n      return true;\n    }\n\n    // Read enough bytes to check signature (12 bytes covers most formats)\n    const buffer = await file.slice(0, 12).arrayBuffer();\n    const bytes = new Uint8Array(buffer);\n\n    // Check if file matches any of the valid signatures\n    const isValid = signature.signatures.some((sig) => matchesSignature(bytes, sig));\n\n    if (!isValid) {\n      logger.warn(`[Security] File signature mismatch for ${file.name}`, {\n        declaredType: expectedType,\n        fileBytes: Array.from(bytes.slice(0, 8))\n          .map((b) => `0x${b.toString(16).toUpperCase().padStart(2, '0')}`)\n          .join(' '),\n        expectedSignatures: signature.signatures.map((s) =>\n          s\n            .map((b) => (b === null ? 'XX' : `0x${b.toString(16).toUpperCase().padStart(2, '0')}`))\n            .join(' ')\n        ),\n      });\n    }\n\n    return isValid;\n  } catch (error) {\n    logger.error('[Security] Error verifying file type:', { error });\n    // Fail securely: reject file if verification fails\n    return false;\n  }\n}\n\n/**\n * Check if file bytes match a signature pattern\n *\n * @param bytes - File bytes to check\n * @param signature - Expected signature (null = any byte)\n * @returns boolean - True if matches\n */\nfunction matchesSignature(bytes: Uint8Array, signature: (number | null)[]): boolean {\n  return signature.every((expectedByte, index) => {\n    // null means \"any byte\" (wildcard)\n    if (expectedByte === null) {\n      return true;\n    }\n    // Check if byte matches\n    return bytes[index] === expectedByte;\n  });\n}\n\n/**\n * Verify multiple file types (for files with ambiguous extensions)\n *\n * @param file - File to verify\n * @param allowedTypes - Array of allowed MIME types\n * @returns Promise<string | null> - Detected MIME type or null if no match\n */\nexport async function detectFileType(file: File, allowedTypes: string[]): Promise<string | null> {\n  try {\n    const buffer = await file.slice(0, 12).arrayBuffer();\n    const bytes = new Uint8Array(buffer);\n\n    // Check each allowed type\n    for (const mimeType of allowedTypes) {\n      const signature = FILE_SIGNATURES[mimeType];\n      if (!signature) continue;\n\n      const matches = signature.signatures.some((sig) => matchesSignature(bytes, sig));\n\n      if (matches) {\n        return mimeType;\n      }\n    }\n\n    return null;\n  } catch (error) {\n    logger.error('[Security] Error detecting file type:', { error });\n    return null;\n  }\n}\n\n/**\n * Get human-readable file type description\n *\n * @param mimeType - MIME type\n * @returns string - Description or MIME type\n */\nexport function getFileTypeDescription(mimeType: string): string {\n  const signature = FILE_SIGNATURES[mimeType];\n  return signature?.description || mimeType;\n}\n\n/**\n * Check if file type has magic number support\n *\n * @param mimeType - MIME type to check\n * @returns boolean - True if signatures are defined\n */\nexport function hasSignatureSupport(mimeType: string): boolean {\n  return mimeType in FILE_SIGNATURES;\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/validators/sanitizeFilename.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages/formio-file-upload/src/validators/sanitizeFilename.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tests for filename sanitization\n */\n\nimport {\n  sanitizeFilename,\n  validateFilename,\n  generateSafeFallbackName,\n  extractExtension,\n  hasAllowedExtension,\n  DANGEROUS_EXTENSIONS,\n} from './sanitizeFilename';\n\ndescribe('sanitizeFilename', () => {\n  describe('basic sanitization', () => {\n    it('should sanitize safe filename', () => {\n      const result = sanitizeFilename('document.pdf', { addTimestamp: false });\n      expect(result).toBe('document.pdf');\n    });\n\n    it('should remove path traversal attacks', () => {\n      const result = sanitizeFilename('../../../etc/passwd', { addTimestamp: false });\n      expect(result).not.toContain('..');\n      expect(result).not.toContain('/');\n    });\n\n    it('should remove dangerous characters', () => {\n      const result = sanitizeFilename('file<>:|\"*.txt', { addTimestamp: false });\n      expect(result).not.toContain('<');\n      expect(result).not.toContain('>');\n      expect(result).not.toContain(':');\n      expect(result).not.toContain('|');\n      expect(result).not.toContain('\"');\n      expect(result).not.toContain('*');\n    });\n\n    it('should remove null bytes', () => {\n      const result = sanitizeFilename('file\\0name.txt', { addTimestamp: false });\n      expect(result).not.toContain('\\0');\n    });\n\n    it('should trim leading/trailing dots and spaces', () => {\n      const result = sanitizeFilename('  ..filename.txt  ', { addTimestamp: false });\n      expect(result).not.toMatch(/^\\./);\n      expect(result).not.toMatch(/^\\s/);\n      expect(result).not.toMatch(/\\s$/);\n    });\n  });\n\n  describe('dangerous extensions', () => {\n    it('should detect .php extension', () => {\n      const result = sanitizeFilename('malicious.php', { addTimestamp: false });\n      expect(result).not.toContain('.php');\n      expect(result).toContain('.safe');\n    });\n\n    it('should detect double extensions (.jpg.php)', () => {\n      const result = sanitizeFilename('image.jpg.php', { addTimestamp: false });\n      expect(result).not.toContain('.php');\n    });\n\n    it('should detect .exe extension', () => {\n      const result = sanitizeFilename('virus.exe', { addTimestamp: false });\n      expect(result).not.toContain('.exe');\n    });\n\n    it('should detect .sh scripts', () => {\n      const result = sanitizeFilename('script.sh', { addTimestamp: false });\n      expect(result).not.toContain('.sh');\n    });\n\n    it('should preserve safe extensions', () => {\n      const safeFiles = ['image.jpg', 'document.pdf', 'data.json', 'style.css'];\n      safeFiles.forEach(filename => {\n        const result = sanitizeFilename(filename, { addTimestamp: false });\n        const ext = filename.substring(filename.lastIndexOf('.'));\n        expect(result).toContain(ext);\n      });\n    });\n  });\n\n  describe('length limits', () => {\n    it('should truncate long filenames', () => {\n      const longName = 'a'.repeat(300) + '.txt';\n      const result = sanitizeFilename(longName, { addTimestamp: false });\n      expect(result.length).toBeLessThanOrEqual(255);\n    });\n\n    it('should preserve extension when truncating', () => {\n      const longName = 'a'.repeat(300) + '.pdf';\n      const result = sanitizeFilename(longName, { addTimestamp: false });\n      expect(result).toContain('.pdf');\n    });\n\n    it('should handle custom max length', () => {\n      const longName = 'a'.repeat(100) + '.txt';\n      const result = sanitizeFilename(longName, {\n        addTimestamp: false,\n        maxLength: 50\n      });\n      expect(result.length).toBeLessThanOrEqual(54); // 50 + .txt\n    });\n  });\n\n  describe('reserved names', () => {\n    it('should detect Windows reserved names', () => {\n      const reserved = ['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'LPT1'];\n      reserved.forEach(name => {\n        const result = sanitizeFilename(`${name}.txt`, { addTimestamp: false });\n        expect(result).toContain('file_');\n      });\n    });\n\n    it('should handle case-insensitive reserved names', () => {\n      const result = sanitizeFilename('con.txt', { addTimestamp: false });\n      expect(result).toContain('file_');\n    });\n  });\n\n  describe('options', () => {\n    it('should add timestamp when enabled', () => {\n      const result = sanitizeFilename('test.txt', { addTimestamp: true });\n      expect(result).toMatch(/test_\\d+\\.txt/);\n    });\n\n    it('should not add timestamp when disabled', () => {\n      const result = sanitizeFilename('test.txt', { addTimestamp: false });\n      expect(result).toBe('test.txt');\n    });\n\n    it('should convert to lowercase when requested', () => {\n      const result = sanitizeFilename('MyFile.PDF', {\n        addTimestamp: false,\n        lowercase: true\n      });\n      expect(result).toBe('myfile.pdf');\n    });\n\n    it('should use custom replacement character', () => {\n      const result = sanitizeFilename('file:name.txt', {\n        addTimestamp: false,\n        replacement: '-'\n      });\n      expect(result).toContain('-');\n      expect(result).not.toContain(':');\n    });\n\n    it('should preserve extension when dangerous and preserveExtension=true', () => {\n      const result = sanitizeFilename('file.php', {\n        addTimestamp: false,\n        preserveExtension: true\n      });\n      expect(result).toContain('.php');\n    });\n  });\n\n  describe('edge cases', () => {\n    it('should handle empty filename', () => {\n      const result = sanitizeFilename('');\n      expect(result).toBeTruthy();\n      expect(result).toMatch(/^file_\\d+_[a-z0-9]+$/);\n    });\n\n    it('should handle filename with no extension', () => {\n      const result = sanitizeFilename('README', { addTimestamp: false });\n      expect(result).toBe('README');\n    });\n\n    it('should handle filename with multiple dots', () => {\n      const result = sanitizeFilename('archive.tar.gz', { addTimestamp: false });\n      expect(result).toContain('.gz');\n    });\n\n    it('should handle Unicode characters', () => {\n      const result = sanitizeFilename('文档.pdf', {\n        addTimestamp: false,\n        allowUnicode: true\n      });\n      expect(result).toContain('文档');\n    });\n\n    it('should remove Unicode when not allowed', () => {\n      const result = sanitizeFilename('文档.pdf', {\n        addTimestamp: false,\n        allowUnicode: false\n      });\n      expect(result).not.toContain('文档');\n    });\n\n    it('should handle null input', () => {\n      const result = sanitizeFilename(null as any);\n      expect(result).toBeTruthy();\n      expect(result).toMatch(/^file_\\d+_[a-z0-9]+$/);\n    });\n\n    it('should handle undefined input', () => {\n      const result = sanitizeFilename(undefined as any);\n      expect(result).toBeTruthy();\n    });\n  });\n\n  describe('validateFilename', () => {\n    it('should validate safe filename', () => {\n      const result = validateFilename('document.pdf');\n      expect(result.valid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect null bytes', () => {\n      const result = validateFilename('file\\0name.txt');\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Filename contains null bytes');\n    });\n\n    it('should detect path traversal', () => {\n      const result = validateFilename('../../etc/passwd');\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Filename contains path traversal patterns');\n    });\n\n    it('should detect dangerous characters in sanitized input', () => {\n      // validateFilename is called AFTER sanitization in production\n      // Test that it validates the clean filename correctly\n      const sanitized = sanitizeFilename('file<>name.txt', { addTimestamp: false });\n      const result = validateFilename(sanitized);\n      expect(result.valid).toBe(true); // After sanitization, it should be valid\n      expect(sanitized).not.toContain('<');\n      expect(sanitized).not.toContain('>');\n    });\n\n    it('should detect dangerous extensions', () => {\n      const result = validateFilename('malicious.php');\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Filename contains dangerous extension');\n    });\n\n    it('should detect too long filename', () => {\n      const longName = 'a'.repeat(300) + '.txt';\n      const result = validateFilename(longName);\n      expect(result.valid).toBe(false);\n      expect(result.errors.some(e => e.includes('too long'))).toBe(true);\n    });\n\n    it('should detect reserved names', () => {\n      const result = validateFilename('CON.txt');\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Filename is a reserved system name');\n    });\n  });\n\n  describe('extractExtension', () => {\n    it('should extract extension with dot', () => {\n      expect(extractExtension('file.txt')).toBe('.txt');\n      expect(extractExtension('image.jpg')).toBe('.jpg');\n    });\n\n    it('should handle no extension', () => {\n      expect(extractExtension('README')).toBe('');\n    });\n\n    it('should handle multiple dots', () => {\n      expect(extractExtension('archive.tar.gz')).toBe('.gz');\n    });\n\n    it('should sanitize dangerous extensions', () => {\n      expect(extractExtension('malicious.php')).toBe('.safe');\n    });\n\n    it('should handle empty input', () => {\n      expect(extractExtension('')).toBe('');\n    });\n  });\n\n  describe('hasAllowedExtension', () => {\n    it('should check against allowed list', () => {\n      const allowed = ['.jpg', '.png', '.gif'];\n      expect(hasAllowedExtension('image.jpg', allowed)).toBe(true);\n      expect(hasAllowedExtension('image.png', allowed)).toBe(true);\n      expect(hasAllowedExtension('document.pdf', allowed)).toBe(false);\n    });\n\n    it('should handle extensions without dots', () => {\n      const allowed = ['jpg', 'png'];\n      expect(hasAllowedExtension('image.jpg', allowed)).toBe(true);\n    });\n\n    it('should be case-insensitive', () => {\n      const allowed = ['.JPG'];\n      expect(hasAllowedExtension('image.jpg', allowed)).toBe(true);\n    });\n  });\n\n  describe('generateSafeFallbackName', () => {\n    it('should generate unique names', () => {\n      const name1 = generateSafeFallbackName();\n      const name2 = generateSafeFallbackName();\n      expect(name1).not.toBe(name2);\n    });\n\n    it('should match safe pattern', () => {\n      const name = generateSafeFallbackName();\n      expect(name).toMatch(/^file_\\d+_[a-z0-9]+$/);\n    });\n  });\n\n  describe('security scenarios', () => {\n    it('should prevent directory traversal', () => {\n      const attacks = [\n        '../../../etc/passwd',\n        '..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam',\n        'uploads/../../../etc/passwd',\n      ];\n\n      attacks.forEach(attack => {\n        const result = sanitizeFilename(attack, { addTimestamp: false });\n        expect(result).not.toContain('..');\n        expect(result).not.toContain('/');\n        expect(result).not.toContain('\\\\');\n      });\n    });\n\n    it('should prevent double extension attacks', () => {\n      const attacks = [\n        'shell.php.jpg',\n        'backdoor.asp.png',\n        'exploit.jsp.gif',\n      ];\n\n      attacks.forEach(attack => {\n        const result = sanitizeFilename(attack, { addTimestamp: false });\n        DANGEROUS_EXTENSIONS.forEach(ext => {\n          expect(result.toLowerCase()).not.toContain(ext);\n        });\n      });\n    });\n\n    it('should prevent XSS in filenames', () => {\n      const attacks = [\n        '<script>alert(\"xss\")</script>.jpg',\n        'image\"><script>alert(1)</script>.png',\n        'file\\' onclick=\"alert(1)\".pdf',\n      ];\n\n      attacks.forEach(attack => {\n        const result = sanitizeFilename(attack, { addTimestamp: false });\n        expect(result).not.toContain('<');\n        expect(result).not.toContain('>');\n        expect(result).not.toContain('\"');\n        expect(result).not.toContain(\"'\");\n      });\n    });\n\n    it('should prevent null byte injection', () => {\n      const result = sanitizeFilename('shell.php\\0.jpg', { addTimestamp: false });\n      expect(result).not.toContain('\\0');\n      expect(result).not.toContain('.php');\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/mishal/code/worktrees/formio-monorepo-20251009/packages/formio-file-upload/src/validators/sanitizeFilename.ts","messages":[{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00, \\x1f.","line":82,"column":32,"nodeType":"Literal","messageId":"unexpected","endLine":82,"endColumn":61},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":167,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":167,"endColumn":33},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00.","line":238,"column":25,"nodeType":"Literal","messageId":"unexpected","endLine":238,"endColumn":40},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00.","line":239,"column":23,"nodeType":"Literal","messageId":"unexpected","endLine":239,"endColumn":38},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":254,"column":31,"nodeType":"NewExpression","endLine":254,"endColumn":81},{"ruleId":"security/detect-non-literal-regexp","severity":2,"message":"Found non-literal argument to RegExp Constructor","line":273,"column":25,"nodeType":"NewExpression","endLine":273,"endColumn":68},{"ruleId":"no-unused-vars","severity":2,"message":"'_options' is assigned a value but never used.","line":315,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":315,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"_options"},"fix":{"range":[6706,6742],"text":""},"desc":"Remove unused variable '_options'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Filename Sanitization Utilities\n *\n * Prevents security vulnerabilities related to malicious filenames:\n * - Path traversal attacks (../../etc/passwd)\n * - Double extension attacks (.jpg.php)\n * - Special character exploits\n * - Null byte injection\n * - XSS in filenames\n */\n\nimport { logger } from '../utils/logger';\n\n/**\n * Dangerous file extensions that should never be allowed\n */\nexport const DANGEROUS_EXTENSIONS = [\n  // Executables\n  '.exe',\n  '.com',\n  '.bat',\n  '.cmd',\n  '.sh',\n  '.bash',\n  '.zsh',\n\n  // Scripts\n  '.js',\n  '.mjs',\n  '.cjs',\n  '.vbs',\n  '.vbe',\n  '.ps1',\n  '.psm1',\n\n  // Server-side code\n  '.php',\n  '.php3',\n  '.php4',\n  '.php5',\n  '.phtml',\n  '.phps',\n  '.asp',\n  '.aspx',\n  '.jsp',\n  '.jspx',\n  '.cgi',\n  '.pl',\n  '.py',\n  '.rb',\n\n  // Configuration files\n  '.htaccess',\n  '.htpasswd',\n  '.ini',\n  '.conf',\n\n  // Compressed executables\n  '.scr',\n  '.pif',\n  '.application',\n  '.gadget',\n  '.msi',\n  '.msp',\n  '.jar',\n  '.war',\n  '.ear',\n\n  // Links and shortcuts\n  '.lnk',\n  '.url',\n  '.desktop',\n\n  // Web archives that can execute\n  '.hta',\n  '.htr',\n];\n\n/**\n * Characters that are dangerous in filenames\n */\nexport const DANGEROUS_CHARS = /[\\x00-\\x1F\"'*/:<>?\\\\|\\x7F]/g;\n\n/**\n * Path traversal patterns\n */\nexport const PATH_TRAVERSAL = /\\.\\.[/\\\\]/g;\n\n/**\n * Maximum safe filename length (POSIX standard is 255 bytes)\n */\nexport const MAX_FILENAME_LENGTH = 255;\n\n/**\n * Reserved Windows filenames\n */\nexport const RESERVED_NAMES = [\n  'CON',\n  'PRN',\n  'AUX',\n  'NUL',\n  'COM1',\n  'COM2',\n  'COM3',\n  'COM4',\n  'COM5',\n  'COM6',\n  'COM7',\n  'COM8',\n  'COM9',\n  'LPT1',\n  'LPT2',\n  'LPT3',\n  'LPT4',\n  'LPT5',\n  'LPT6',\n  'LPT7',\n  'LPT8',\n  'LPT9',\n];\n\nexport interface SanitizeOptions {\n  /**\n   * Replace dangerous characters with this string\n   * @default '_'\n   */\n  replacement?: string;\n\n  /**\n   * Maximum filename length (without extension)\n   * @default 200\n   */\n  maxLength?: number;\n\n  /**\n   * Preserve original extension even if dangerous\n   * @default false\n   */\n  preserveExtension?: boolean;\n\n  /**\n   * Add timestamp to prevent collisions\n   * @default true\n   */\n  addTimestamp?: boolean;\n\n  /**\n   * Convert to lowercase\n   * @default false\n   */\n  lowercase?: boolean;\n\n  /**\n   * Allow Unicode characters\n   * @default true\n   */\n  allowUnicode?: boolean;\n}\n\n/**\n * Sanitize filename to prevent security vulnerabilities\n *\n * @param filename - Original filename\n * @param options - Sanitization options\n * @returns Sanitized filename\n */\nexport function sanitizeFilename(filename: string, options: SanitizeOptions = {}): string {\n  const {\n    replacement = '_',\n    maxLength = 200,\n    preserveExtension = false,\n    addTimestamp = true,\n    lowercase = false,\n    allowUnicode = true,\n  } = options;\n\n  if (!filename || typeof filename !== 'string') {\n    return generateSafeFallbackName();\n  }\n\n  let safe = filename;\n\n  // Remove null bytes (security risk)\n  safe = safe.replace(/\\0/g, '');\n\n  // Remove any path components (path traversal prevention)\n  safe = safe.replace(/^.*[/\\\\]/, '');\n\n  // Remove path traversal patterns\n  safe = safe.replace(PATH_TRAVERSAL, replacement);\n\n  // Split into name and extension\n  const lastDotIndex = safe.lastIndexOf('.');\n  let name = lastDotIndex > 0 ? safe.substring(0, lastDotIndex) : safe;\n  let ext = lastDotIndex > 0 ? safe.substring(lastDotIndex) : '';\n\n  // Convert to lowercase if requested\n  if (lowercase) {\n    name = name.toLowerCase();\n    ext = ext.toLowerCase();\n  }\n\n  // Check for dangerous double extensions\n  if (!preserveExtension) {\n    const dangerousExtFound = DANGEROUS_EXTENSIONS.some((dangerousExt) => {\n      const extLower = ext.toLowerCase();\n      const nameLower = name.toLowerCase();\n\n      // Check if extension is dangerous\n      if (extLower === dangerousExt) {\n        return true;\n      }\n\n      // Check for double extension (.jpg.php)\n      if (nameLower.endsWith(dangerousExt)) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (dangerousExtFound) {\n      logger.warn(`[Security] Dangerous extension detected in: ${filename}`);\n      // Replace dangerous extension with safe marker\n      ext = `${ext.replace(/\\./g, '_')  }.safe`;\n      name = name.replace(/\\./g, '_');\n    }\n  }\n\n  // Replace dangerous characters in name\n  name = name.replace(DANGEROUS_CHARS, replacement);\n\n  // Replace dangerous characters in extension\n  ext = ext.replace(DANGEROUS_CHARS, replacement);\n\n  // Remove non-ASCII characters if not allowed\n  if (!allowUnicode) {\n    name = name.replace(/[^\\x00-\\x7F]/g, replacement);\n    ext = ext.replace(/[^\\x00-\\x7F]/g, replacement);\n  }\n\n  // Remove leading/trailing dots and spaces (Windows compatibility)\n  name = name.replace(/^[\\s.]+|[\\s.]+$/g, '');\n  ext = ext.replace(/^[\\s.]+|[\\s.]+$/g, '');\n\n  // Check for reserved Windows names\n  const nameUpper = name.toUpperCase();\n  if (RESERVED_NAMES.includes(nameUpper)) {\n    logger.warn(`[Security] Reserved Windows filename detected: ${name}`);\n    name = `file_${name}`;\n  }\n\n  // Collapse multiple replacements\n  const multipleReplacement = new RegExp(`${escapeRegex(replacement)}{2,}`, 'g');\n  name = name.replace(multipleReplacement, replacement);\n\n  // Ensure name is not empty\n  if (!name || name === replacement) {\n    name = 'unnamed';\n  }\n\n  // Add timestamp to prevent collisions\n  if (addTimestamp) {\n    const timestamp = Date.now();\n    name = `${name}_${timestamp}`;\n  }\n\n  // Enforce length limit (leave room for extension)\n  const maxNameLength = Math.min(maxLength, MAX_FILENAME_LENGTH - ext.length - 1);\n  if (name.length > maxNameLength) {\n    name = name.substring(0, maxNameLength);\n    // Remove trailing replacement character\n    name = name.replace(new RegExp(`${escapeRegex(replacement)}+$`), '');\n  }\n\n  // Ensure extension starts with dot\n  if (ext && !ext.startsWith('.')) {\n    ext = `.${  ext}`;\n  }\n\n  // Combine name and extension\n  const sanitized = name + ext;\n\n  // Final validation\n  if (sanitized.length > MAX_FILENAME_LENGTH) {\n    logger.warn(`[Security] Filename too long after sanitization: ${sanitized.length} bytes`);\n    return generateSafeFallbackName();\n  }\n\n  // Log if filename was changed significantly\n  if (sanitized !== filename) {\n    logger.info(`[Security] Filename sanitized: \"${filename}\" -> \"${sanitized}\"`);\n  }\n\n  return sanitized;\n}\n\nexport interface ValidationOptions {\n  /**\n   * Validate raw filename without sanitization\n   * @default false\n   */\n  raw?: boolean;\n}\n\n/**\n * Check if filename contains dangerous patterns\n *\n * @param filename - Filename to check\n * @param options - Validation options\n * @returns Object with validation result\n */\nexport function validateFilename(\n  filename: string,\n  _options: ValidationOptions = {}\n): {\n  valid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  if (!filename || typeof filename !== 'string') {\n    errors.push('Filename is empty or invalid');\n    return { valid: false, errors };\n  }\n\n  // Check for null bytes\n  if (filename.includes('\\0')) {\n    errors.push('Filename contains null bytes');\n  }\n\n  // Check for path traversal\n  if (PATH_TRAVERSAL.test(filename)) {\n    errors.push('Filename contains path traversal patterns');\n  }\n\n  // Check for dangerous characters\n  if (DANGEROUS_CHARS.test(filename)) {\n    errors.push('Filename contains dangerous characters');\n  }\n\n  // Check for dangerous extensions\n  const filenameLower = filename.toLowerCase();\n  const hasDangerousExt = DANGEROUS_EXTENSIONS.some(\n    (ext) => filenameLower.endsWith(ext) || filenameLower.includes(`${ext  }.`)\n  );\n\n  if (hasDangerousExt) {\n    errors.push('Filename contains dangerous extension');\n  }\n\n  // Check length\n  if (filename.length > MAX_FILENAME_LENGTH) {\n    errors.push(`Filename too long (${filename.length} > ${MAX_FILENAME_LENGTH})`);\n  }\n\n  // Check for reserved names\n  const nameWithoutExt = filename.substring(0, filename.lastIndexOf('.'));\n  if (RESERVED_NAMES.includes(nameWithoutExt.toUpperCase())) {\n    errors.push('Filename is a reserved system name');\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Generate a safe fallback filename\n *\n * @returns Safe filename with timestamp\n */\nexport function generateSafeFallbackName(): string {\n  const timestamp = Date.now();\n  const random = Math.random().toString(36).substring(2, 8);\n  return `file_${timestamp}_${random}`;\n}\n\n/**\n * Escape special regex characters\n *\n * @param str - String to escape\n * @returns Escaped string\n */\nfunction escapeRegex(str: string): string {\n  return str.replace(/[$()*+.?[\\\\\\]^{|}]/g, '\\\\$&');\n}\n\n/**\n * Extract safe extension from filename\n *\n * @param filename - Filename\n * @returns Extension (with dot) or empty string\n */\nexport function extractExtension(filename: string): string {\n  if (!filename || typeof filename !== 'string') {\n    return '';\n  }\n\n  const lastDot = filename.lastIndexOf('.');\n  if (lastDot === -1 || lastDot === 0) {\n    return '';\n  }\n\n  let ext = filename.substring(lastDot);\n\n  // Sanitize extension\n  ext = ext.replace(DANGEROUS_CHARS, '_');\n  ext = ext.toLowerCase();\n\n  // Check if dangerous\n  if (DANGEROUS_EXTENSIONS.includes(ext)) {\n    return '.safe';\n  }\n\n  return ext;\n}\n\n/**\n * Check if extension is in allowed list\n *\n * @param filename - Filename\n * @param allowedExtensions - Array of allowed extensions (with or without dot)\n * @returns boolean\n */\nexport function hasAllowedExtension(filename: string, allowedExtensions: string[]): boolean {\n  const ext = extractExtension(filename);\n  if (!ext) return false;\n\n  const normalizedAllowed = allowedExtensions.map((e) =>\n    e.startsWith('.') ? e.toLowerCase() : `.${  e.toLowerCase()}`\n  );\n\n  return normalizedAllowed.includes(ext);\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]}]
