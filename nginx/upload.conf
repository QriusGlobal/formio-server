# Nginx configuration for Form.io file upload routing

upstream formio_server {
    server formio-server:3001;
    keepalive 32;
}

upstream tus_server {
    server tus-server:1080;
    keepalive 32;
}

upstream webhook_handler {
    server webhook-handler:3002;
    keepalive 16;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;

# Upload progress tracking
upload_progress uploads 1m;

server {
    listen 80;
    server_name localhost;

    # Increased timeouts for large uploads
    client_max_body_size 5G;
    client_body_timeout 3600s;
    client_header_timeout 3600s;
    keepalive_timeout 3600s;
    send_timeout 3600s;
    proxy_connect_timeout 3600s;
    proxy_send_timeout 3600s;
    proxy_read_timeout 3600s;

    # Disable buffering for uploads
    proxy_request_buffering off;
    proxy_buffering off;

    # Enable gzip compression (except for uploads)
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss;
    gzip_disable "MSIE [1-6]\.";

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # CORS headers for uploads
    add_header 'Access-Control-Allow-Origin' '$http_origin' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Upload-Offset,Upload-Length,Tus-Resumable' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,Upload-Offset,Location,Tus-Resumable,Tus-Version' always;
    add_header 'Access-Control-Max-Age' 1728000 always;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # TUS upload endpoints (resumable uploads)
    location /files/ {
        # Apply rate limiting
        limit_req zone=upload_limit burst=5 nodelay;

        # Disable gzip for uploads
        gzip off;

        # Track upload progress
        track_uploads uploads 30s;

        # Proxy to TUS server
        proxy_pass http://tus_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Pass through TUS headers
        proxy_pass_request_headers on;
        proxy_set_header Tus-Resumable $http_tus_resumable;
        proxy_set_header Upload-Offset $http_upload_offset;
        proxy_set_header Upload-Length $http_upload_length;
        proxy_set_header Upload-Metadata $http_upload_metadata;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Upload-Offset,Upload-Length,Tus-Resumable' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Upload progress endpoint
    location ^~ /progress {
        report_uploads uploads;
    }

    # Webhook handler endpoints
    location /webhooks/ {
        proxy_pass http://webhook_handler;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Webhook security
        limit_req zone=api_limit burst=20 nodelay;
    }

    # Form.io API endpoints
    location / {
        # Apply rate limiting
        limit_req zone=api_limit burst=50 nodelay;

        # Proxy to Form.io server
        proxy_pass http://formio_server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://formio_server;
            proxy_cache_valid 200 7d;
            proxy_cache_valid 404 1m;
            expires 7d;
            add_header Cache-Control "public, immutable";
        }
    }

    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /\.git {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Custom error pages
    error_page 413 /413.html;
    location = /413.html {
        return 413 '{"error": "File too large. Maximum upload size is 5GB."}';
        add_header Content-Type application/json;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        return 500 '{"error": "Internal server error. Please try again later."}';
        add_header Content-Type application/json;
    }
}

# HTTPS configuration (for production)
# Uncomment and configure SSL certificates for production use
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#
#     ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;
#
#     # Include all location blocks from above
# }
#
# # Redirect HTTP to HTTPS
# server {
#     listen 80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }