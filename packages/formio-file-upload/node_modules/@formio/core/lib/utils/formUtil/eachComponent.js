"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.eachComponent = void 0;
const index_1 = require("./index");
/**
 * Iterate through each component within a form.
 *
 * @param {Object} components
 *   The components to iterate.
 * @param {Function} fn
 *   The iteration function to invoke for each component.
 * @param {Boolean} includeAll
 *   Whether or not to include layout components.
 * @param {Object} parent
 *   The parent object.
 */
function eachComponent(components, fn, includeAll, parentPaths, parent) {
    if (!components)
        return;
    if (typeof parentPaths === 'string') {
        parentPaths = { path: parentPaths };
    }
    components.forEach((component) => {
        if (!component) {
            return;
        }
        const info = (0, index_1.componentInfo)(component);
        let noRecurse = false;
        const compPaths = (0, index_1.getComponentPaths)(component, parent, parentPaths);
        if (includeAll || component.tree || !info.layout) {
            const path = includeAll ? compPaths.fullPath : compPaths.path;
            noRecurse = !!fn(component, path || '', components, parent, compPaths);
        }
        if (!noRecurse) {
            if (info.hasColumns) {
                component.columns.forEach((column) => eachComponent(column.components, fn, includeAll, compPaths, component));
            }
            else if (info.hasRows) {
                component.rows.forEach((row) => {
                    if (Array.isArray(row)) {
                        row.forEach((column) => eachComponent(column.components, fn, includeAll, compPaths, component));
                    }
                });
            }
            else if (info.hasComps) {
                eachComponent(component.components, fn, includeAll, compPaths, component);
            }
        }
    });
}
exports.eachComponent = eachComponent;
