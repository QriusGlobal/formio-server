"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.operators = void 0;
// Use only immutable useful functions from Lodash.
// Visit https://lodash.com/docs for more info.
const lodash_1 = require("lodash");
exports.operators = {
    chunk: lodash_1.chunk,
    compact: lodash_1.compact,
    concat: lodash_1.concat,
    difference: lodash_1.difference,
    drop: lodash_1.drop,
    dropRight: lodash_1.dropRight,
    findIndex: lodash_1.findIndex,
    findLastIndex: lodash_1.findLastIndex,
    first: lodash_1.first,
    flatten: lodash_1.flatten,
    flattenDeep: lodash_1.flattenDeep,
    flattenDepth: lodash_1.flattenDepth,
    fromPairs: lodash_1.fromPairs,
    head: lodash_1.head,
    indexOf: lodash_1.indexOf,
    initial: lodash_1.initial,
    intersection: lodash_1.intersection,
    intersectionBy: lodash_1.intersectionBy,
    intersectionWith: lodash_1.intersectionWith,
    join: lodash_1.join,
    last: lodash_1.last,
    lastIndexOf: lodash_1.lastIndexOf,
    nth: lodash_1.nth,
    slice: lodash_1.slice,
    sortedIndex: lodash_1.sortedIndex,
    sortedIndexBy: lodash_1.sortedIndexBy,
    sortedIndexOf: lodash_1.sortedIndexOf,
    sortedLastIndex: lodash_1.sortedLastIndex,
    sortedLastIndexBy: lodash_1.sortedLastIndexBy,
    sortedLastIndexOf: lodash_1.sortedLastIndexOf,
    sortedUniq: lodash_1.sortedUniq,
    sortedUniqBy: lodash_1.sortedUniqBy,
    tail: lodash_1.tail,
    take: lodash_1.take,
    takeRight: lodash_1.takeRight,
    takeRightWhile: lodash_1.takeRightWhile,
    takeWhile: lodash_1.takeWhile,
    union: lodash_1.union,
    unionBy: lodash_1.unionBy,
    unionWith: lodash_1.unionWith,
    uniq: lodash_1.uniq,
    uniqBy: lodash_1.uniqBy,
    uniqWith: lodash_1.uniqWith,
    unzip: lodash_1.unzip,
    unzipWith: lodash_1.unzipWith,
    without: lodash_1.without,
    xor: lodash_1.xor,
    xorBy: lodash_1.xorBy,
    xorWith: lodash_1.xorWith,
    zip: lodash_1.zip,
    zipObject: lodash_1.zipObject,
    zipObjectDeep: lodash_1.zipObjectDeep,
    zipWith: lodash_1.zipWith,
    countBy: lodash_1.countBy,
    every: lodash_1.every,
    filter: lodash_1.filter,
    find: lodash_1.find,
    findLast: lodash_1.findLast,
    flatMap: lodash_1.flatMap,
    flatMapDeep: lodash_1.flatMapDeep,
    flatMapDepth: lodash_1.flatMapDepth,
    groupBy: lodash_1.groupBy,
    includes: lodash_1.includes,
    invokeMap: lodash_1.invokeMap,
    keyBy: lodash_1.keyBy,
    map: lodash_1.map,
    orderBy: lodash_1.orderBy,
    partition: lodash_1.partition,
    reduce: lodash_1.reduce,
    reduceRight: lodash_1.reduceRight,
    reject: lodash_1.reject,
    sample: lodash_1.sample,
    sampleSize: lodash_1.sampleSize,
    shuffle: lodash_1.shuffle,
    size: lodash_1.size,
    some: lodash_1.some,
    sortBy: lodash_1.sortBy,
    now: lodash_1.now,
    flip: lodash_1.flip,
    negate: lodash_1.negate,
    overArgs: lodash_1.overArgs,
    partial: lodash_1.partial,
    partialRight: lodash_1.partialRight,
    rearg: lodash_1.rearg,
    rest: lodash_1.rest,
    spread: lodash_1.spread,
    castArray: lodash_1.castArray,
    clone: lodash_1.clone,
    cloneDeepWith: lodash_1.cloneDeepWith,
    cloneDeep: lodash_1.cloneDeep,
    conformsTo: lodash_1.conformsTo,
    eq: lodash_1.eq,
    gt: lodash_1.gt,
    gte: lodash_1.gte,
    isArguments: lodash_1.isArguments,
    isArray: lodash_1.isArray,
    isArrayBuffer: lodash_1.isArrayBuffer,
    isArrayLike: lodash_1.isArrayLike,
    isArrayLikeObject: lodash_1.isArrayLikeObject,
    isBoolean: lodash_1.isBoolean,
    isBuffer: lodash_1.isBuffer,
    isDate: lodash_1.isDate,
    isElement: lodash_1.isElement,
    isEmpty: lodash_1.isEmpty,
    isEqual: lodash_1.isEqual,
    isEqualWith: lodash_1.isEqualWith,
    isError: lodash_1.isError,
    isFinite: lodash_1.isFinite,
    isFunction: lodash_1.isFunction,
    isInteger: lodash_1.isInteger,
    isLength: lodash_1.isLength,
    isMap: lodash_1.isMap,
    isMatch: lodash_1.isMatch,
    isMatchWith: lodash_1.isMatchWith,
    isNaN: lodash_1.isNaN,
    isNative: lodash_1.isNative,
    isNil: lodash_1.isNil,
    isNull: lodash_1.isNull,
    isNumber: lodash_1.isNumber,
    isObject: lodash_1.isObject,
    isObjectLike: lodash_1.isObjectLike,
    isPlainObject: lodash_1.isPlainObject,
    isRegExp: lodash_1.isRegExp,
    isSafeInteger: lodash_1.isSafeInteger,
    isSet: lodash_1.isSet,
    isString: lodash_1.isString,
    isSymbol: lodash_1.isSymbol,
    isTypedArray: lodash_1.isTypedArray,
    isUndefined: lodash_1.isUndefined,
    isWeakMap: lodash_1.isWeakMap,
    isWeakSet: lodash_1.isWeakSet,
    lt: lodash_1.lt,
    lte: lodash_1.lte,
    toArray: lodash_1.toArray,
    toFinite: lodash_1.toFinite,
    toInteger: lodash_1.toInteger,
    toLength: lodash_1.toLength,
    toNumber: lodash_1.toNumber,
    toPlainObject: lodash_1.toPlainObject,
    toSafeInteger: lodash_1.toSafeInteger,
    toString: lodash_1.toString,
    add: lodash_1.add,
    ceil: lodash_1.ceil,
    divide: lodash_1.divide,
    floor: lodash_1.floor,
    max: lodash_1.max,
    maxBy: lodash_1.maxBy,
    mean: lodash_1.mean,
    meanBy: lodash_1.meanBy,
    min: lodash_1.min,
    minBy: lodash_1.minBy,
    multiply: lodash_1.multiply,
    round: lodash_1.round,
    subtract: lodash_1.subtract,
    sum: lodash_1.sum,
    sumBy: lodash_1.sumBy,
    clamp: lodash_1.clamp,
    inRange: lodash_1.inRange,
    random: lodash_1.random,
    at: lodash_1.at,
    entries: lodash_1.entries,
    entriesIn: lodash_1.entriesIn,
    findKey: lodash_1.findKey,
    findLastKey: lodash_1.findLastKey,
    functions: lodash_1.functions,
    functionsIn: lodash_1.functionsIn,
    get: lodash_1.get,
    has: lodash_1.has,
    hasIn: lodash_1.hasIn,
    invert: lodash_1.invert,
    invertBy: lodash_1.invertBy,
    invoke: lodash_1.invoke,
    keys: lodash_1.keys,
    keysIn: lodash_1.keysIn,
    mapKeys: lodash_1.mapKeys,
    mapValues: lodash_1.mapValues,
    omit: lodash_1.omit,
    omitBy: lodash_1.omitBy,
    pick: lodash_1.pick,
    pickBy: lodash_1.pickBy,
    result: lodash_1.result,
    toPairs: lodash_1.toPairs,
    toPairsIn: lodash_1.toPairsIn,
    transform: lodash_1.transform,
    values: lodash_1.values,
    valuesIn: lodash_1.valuesIn,
    camelCase: lodash_1.camelCase,
    capitalize: lodash_1.capitalize,
    deburr: lodash_1.deburr,
    endsWith: lodash_1.endsWith,
    escape: lodash_1.escape,
    escapeRegExp: lodash_1.escapeRegExp,
    kebabCase: lodash_1.kebabCase,
    lowerCase: lodash_1.lowerCase,
    lowerFirst: lodash_1.lowerFirst,
    pad: lodash_1.pad,
    padEnd: lodash_1.padEnd,
    padStart: lodash_1.padStart,
    parseInt: lodash_1.parseInt,
    repeat: lodash_1.repeat,
    replace: lodash_1.replace,
    snakeCase: lodash_1.snakeCase,
    split: lodash_1.split,
    startCase: lodash_1.startCase,
    startsWith: lodash_1.startsWith,
    toLower: lodash_1.toLower,
    toUpper: lodash_1.toUpper,
    trim: lodash_1.trim,
    trimEnd: lodash_1.trimEnd,
    trimStart: lodash_1.trimStart,
    truncate: lodash_1.truncate,
    unescape: lodash_1.unescape,
    upperCase: lodash_1.upperCase,
    upperFirst: lodash_1.upperFirst,
    words: lodash_1.words,
    cond: lodash_1.cond,
    conforms: lodash_1.conforms,
    constant: lodash_1.constant,
    defaultTo: lodash_1.defaultTo,
    flow: lodash_1.flow,
    flowRight: lodash_1.flowRight,
    identity: lodash_1.identity,
    iteratee: lodash_1.iteratee,
    matches: lodash_1.matches,
    matchesProperty: lodash_1.matchesProperty,
    method: lodash_1.method,
    methodOf: lodash_1.methodOf,
    nthArg: lodash_1.nthArg,
    over: lodash_1.over,
    overEvery: lodash_1.overEvery,
    overSome: lodash_1.overSome,
    property: lodash_1.property,
    propertyOf: lodash_1.propertyOf,
    range: lodash_1.range,
    rangeRight: lodash_1.rangeRight,
    stubArray: lodash_1.stubArray,
    stubFalse: lodash_1.stubFalse,
    stubObject: lodash_1.stubObject,
    stubString: lodash_1.stubString,
    stubTrue: lodash_1.stubTrue,
    times: lodash_1.times,
    toPath: lodash_1.toPath,
    uniqueId: lodash_1.uniqueId,
};
