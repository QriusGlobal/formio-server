export type EvaluatorOptions = {
    noeval?: boolean;
    data?: any;
    formModule?: string;
};
export declare class DefaultEvaluator {
    noeval: boolean;
    templateSettings: {
        interpolate: RegExp;
        evaluate: RegExp;
        escape: RegExp;
    };
    constructor(options?: EvaluatorOptions);
    evaluator(func: any, ...params: any): any;
    interpolateString(rawTemplate: string, data: any, options?: EvaluatorOptions): any;
    interpolate(rawTemplate: any, data: any, options?: EvaluatorOptions): any;
    /**
     * Evaluate a method.
     *
     * @param func
     * @param args
     * @return {*}
     */
    evaluate(func: any, args?: any, ret?: any, interpolate?: boolean, context?: any, options?: EvaluatorOptions): any;
    /**
     * Execute a function.
     *
     * @param func
     * @param args
     * @returns
     */
    execute(func: string | any, args: any, context?: any, options?: EvaluatorOptions): any;
}
export declare let Evaluator: DefaultEvaluator;
export declare function registerEvaluator(override: DefaultEvaluator): void;
