import { EvaluatorOptions } from './Evaluator';
import { PassedComponentInstance, ResourceToDomOptions } from '../types';
/**
 * Escapes RegEx characters in provided String value.
 *
 * @param {String} value
 *   String for escaping RegEx characters.
 * @returns {string}
 *   String with escaped RegEx characters.
 */
export declare function escapeRegExCharacters(value: string): string;
/**
 * Determines the boolean value of a setting.
 *
 * @param value
 * @return {boolean}
 */
export declare function boolValue(value: any): boolean;
/**
 * Unescape HTML characters like &lt, &gt, &amp and etc.
 * @param str
 * @returns {string}
 */
export declare function unescapeHTML(str: string): string | null;
export declare function attachResourceToDom(options: ResourceToDomOptions): void;
type EvaluatorContext = {
    evalContext?: (context: any) => any;
    instance?: PassedComponentInstance;
    [key: string]: any;
};
export type EvaluatorFn = (context: EvaluatorContext) => any;
/**
 * A convenience function that wraps Evaluator.evaluate and normalizes context values
 * @param evaluation - The code string to evaluate
 * @param context - The processor context
 * @param ret - The return value
 * @param interpolate - Whether or not to interpolate the code string before evaluating
 * @param evalContextFn - A callback to mutate the context value after it has been normalized
 * @param options - Options to pass to the Evaluator
 * @returns {*} - Returns the result of the evaluation
 */
export declare function evaluate(evaluation: string, context: EvaluatorContext, ret?: string, interpolate?: boolean, evalContextFn?: EvaluatorFn, options?: EvaluatorOptions): any;
export declare function interpolate(evaluation: string, context: EvaluatorContext, evalContextFn?: EvaluatorFn): string;
export {};
