"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hideChildrenProcessorInfo = exports.hideChildrenProcessorAsync = exports.hideChildrenProcessor = void 0;
const formUtil_1 = require("../utils/formUtil");
/**
 * This processor function checks components for the `hidden` property and, if children are present, sets them to hidden as well.
 */
const hideChildrenProcessor = (context) => {
    var _a, _b, _c;
    const { component, path, parent, scope } = context;
    // Check if there's a conditional set for the component and if it's marked as conditionally hidden
    const isConditionallyHidden = (_a = scope.conditionals) === null || _a === void 0 ? void 0 : _a.find((cond) => {
        return path === cond.path && cond.conditionallyHidden;
    });
    if (!scope.conditionals) {
        scope.conditionals = [];
    }
    if (isConditionallyHidden || ((_b = parent === null || parent === void 0 ? void 0 : parent.scope) === null || _b === void 0 ? void 0 : _b.conditionallyHidden)) {
        (0, formUtil_1.setComponentScope)(component, 'conditionallyHidden', true);
    }
    if ((component.hasOwnProperty('hidden') && !!component.hidden) ||
        ((_c = parent === null || parent === void 0 ? void 0 : parent.scope) === null || _c === void 0 ? void 0 : _c.intentionallyHidden)) {
        (0, formUtil_1.setComponentScope)(component, 'intentionallyHidden', true);
    }
};
exports.hideChildrenProcessor = hideChildrenProcessor;
const hideChildrenProcessorAsync = (context) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, exports.hideChildrenProcessor)(context);
});
exports.hideChildrenProcessorAsync = hideChildrenProcessorAsync;
exports.hideChildrenProcessorInfo = {
    name: 'hideChildren',
    shouldProcess: () => true,
    processSync: exports.hideChildrenProcessor,
    process: exports.hideChildrenProcessorAsync,
};
