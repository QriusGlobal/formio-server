"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const __1 = require("../");
const util_1 = require("../../__tests__/fixtures/util");
const filterProcess = (context) => __awaiter(void 0, void 0, void 0, function* () {
    (0, __1.filterProcessSync)(context);
    (0, __1.filterPostProcess)(context);
});
describe('Filter processor', function () {
    it('Should not filter empty array value for dataGrid component', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const dataGridComp = {
                type: 'datagrid',
                key: 'dataGrid',
                input: true,
                path: 'dataGrid',
                components: [
                    {
                        type: 'textfield',
                        key: 'textField',
                        input: true,
                        label: 'Text Field',
                    },
                ],
            };
            const data = {
                dataGrid: [],
            };
            const context = (0, util_1.generateProcessorContext)(dataGridComp, data);
            filterProcess(context);
            (0, chai_1.expect)(context.scope.filter).to.deep.equal({
                dataGrid: true,
            });
        });
    });
    it('Should not filter empty array value for editGrid component', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const editGridComp = {
                type: 'editgrid',
                key: 'editGrid',
                input: true,
                components: [
                    {
                        type: 'textfield',
                        key: 'textField',
                        input: true,
                        label: 'Text Field',
                    },
                ],
            };
            const data = {
                editGrid: [],
            };
            const context = (0, util_1.generateProcessorContext)(editGridComp, data);
            filterProcess(context);
            (0, chai_1.expect)(context.scope.filter).to.deep.equal({
                editGrid: true,
            });
        });
    });
    it('Should not filter empty array value for dataTable component', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const dataTableComp = {
                type: 'datatable',
                key: 'dataTable',
                input: true,
                path: 'dataTable',
                components: [
                    {
                        type: 'textfield',
                        key: 'textField',
                        input: true,
                        label: 'Text Field',
                    },
                ],
            };
            const data = {
                dataTable: [],
            };
            const context = (0, util_1.generateProcessorContext)(dataTableComp, data);
            filterProcess(context);
            (0, chai_1.expect)(context.scope.filter).to.deep.equal({
                dataTable: true,
            });
        });
    });
    it('Should not filter coordinates for Tagpad component', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tagpadComp = {
                label: 'Tagpad',
                imageUrl: 'https://onetreeplanted.org/cdn/shop/articles/nature_facts_1600x.jpg?v=1705008496',
                tableView: false,
                validateWhenHidden: false,
                key: 'tagpad',
                path: 'tagpad',
                type: 'tagpad',
                input: true,
                components: [
                    {
                        label: 'Text Field',
                        applyMaskOn: 'change',
                        tableView: true,
                        validateWhenHidden: false,
                        key: 'textField',
                        type: 'textfield',
                        input: true,
                    },
                ],
            };
            const data = {
                tagpad: [
                    {
                        coordinate: {
                            x: 83,
                            y: 61,
                            width: 280,
                            height: 133,
                        },
                        data: {
                            textField: 'test1',
                        },
                    },
                    {
                        coordinate: {
                            x: 194,
                            y: 93,
                            width: 280,
                            height: 133,
                        },
                        data: {
                            textField: 'test2',
                        },
                    },
                ],
            };
            const context = (0, util_1.generateProcessorContext)(tagpadComp, data);
            filterProcess(context);
            (0, chai_1.expect)(context.scope.filtered).to.deep.equal({
                tagpad: [
                    {
                        coordinate: {
                            x: 83,
                            y: 61,
                            width: 280,
                            height: 133,
                        },
                        data: {},
                    },
                    {
                        coordinate: {
                            x: 194,
                            y: 93,
                            width: 280,
                            height: 133,
                        },
                        data: {},
                    },
                ],
            });
        });
    });
    it('Should not filter the datamap component', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const dataMapComp = {
                label: 'Data Map',
                tableView: false,
                validateWhenHidden: false,
                key: 'dataMap',
                type: 'datamap',
                path: 'dataMap',
                input: true,
                valueComponent: {
                    type: 'textfield',
                    key: 'value',
                    label: 'Value',
                    input: true,
                    hideLabel: true,
                    tableView: true,
                },
            };
            const data = {
                dataMap: {
                    foo: 'bar',
                    baz: 'biz',
                },
            };
            const context = (0, util_1.generateProcessorContext)(dataMapComp, data);
            filterProcess(context);
            (0, chai_1.expect)(context.scope.filtered).to.deep.equal({
                dataMap: {
                    foo: 'bar',
                    baz: 'biz',
                },
            });
        });
    });
});
