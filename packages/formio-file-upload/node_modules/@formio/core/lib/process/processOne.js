"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postProcessOneSync = exports.postProcessOne = exports.processOneSync = exports.processOne = exports.contextValue = void 0;
const lodash_1 = require("lodash");
const types_1 = require("../types");
const formUtil_1 = require("../utils/formUtil");
function contextValue(context) {
    const { component, paths, local, path } = context;
    if (typeof context.value === 'undefined') {
        const dataPath = local ? (paths === null || paths === void 0 ? void 0 : paths.localDataPath) || path : (paths === null || paths === void 0 ? void 0 : paths.dataPath) || path;
        Object.defineProperty(context, 'value', {
            enumerable: true,
            get() {
                const modelType = (0, formUtil_1.getModelType)(component);
                if (!component.type || modelType === 'none' || modelType === 'content') {
                    return undefined;
                }
                return (0, lodash_1.get)(context.data, dataPath);
            },
            set(newValue) {
                const modelType = (0, formUtil_1.getModelType)(component);
                if (!component.type || modelType === 'none' || modelType === 'content') {
                    // Do not set the value if the model type is 'none' or 'content'
                    return;
                }
                (0, lodash_1.set)(context.data, dataPath, newValue);
            },
        });
    }
}
exports.contextValue = contextValue;
function processOne(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { processors } = context;
        contextValue(context);
        context.processor = types_1.ProcessorType.Custom;
        for (const processor of processors) {
            if (processor === null || processor === void 0 ? void 0 : processor.process) {
                yield processor.process(context);
            }
        }
    });
}
exports.processOne = processOne;
function processOneSync(context) {
    const { processors } = context;
    contextValue(context);
    context.processor = types_1.ProcessorType.Custom;
    for (const processor of processors) {
        if (processor === null || processor === void 0 ? void 0 : processor.processSync) {
            processor.processSync(context);
        }
    }
}
exports.processOneSync = processOneSync;
function postProcessOne(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { processors } = context;
        contextValue(context);
        context.processor = types_1.ProcessorType.Custom;
        for (const processor of processors) {
            if (processor === null || processor === void 0 ? void 0 : processor.postProcess) {
                yield processor.postProcess(context);
            }
        }
    });
}
exports.postProcessOne = postProcessOne;
function postProcessOneSync(context) {
    const { processors } = context;
    contextValue(context);
    context.processor = types_1.ProcessorType.Custom;
    for (const processor of processors) {
        if (processor === null || processor === void 0 ? void 0 : processor.postProcessSync) {
            processor.postProcessSync(context);
        }
    }
}
exports.postProcessOneSync = postProcessOneSync;
