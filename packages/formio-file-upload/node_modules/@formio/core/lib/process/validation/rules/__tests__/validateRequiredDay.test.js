"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const error_1 = require("../../../../error");
const components_1 = require("./fixtures/components");
const util_1 = require("./fixtures/util");
const validateRequiredDay_1 = require("../validateRequiredDay");
describe('validateRequiredDay', function () {
    it('Validating a day component without data will return a requiredDayEmpty FieldError', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = Object.assign(Object.assign({}, components_1.simpleDayField), { fields: { day: { required: true }, month: { required: false }, year: { required: false } } });
            const data = {};
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateRequiredDay_1.validateRequiredDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('requiredDayEmpty');
        });
    });
    it('Validating a day component that requires day will return a FieldError if day is not given', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = Object.assign(Object.assign({}, components_1.simpleDayField), { fields: { day: { required: true } } });
            const data = { component: '01/00/2024' };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateRequiredDay_1.validateRequiredDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('requiredDayField');
        });
    });
    it('Validating a day component that requires month will return a FieldError if month is not given', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = Object.assign(Object.assign({}, components_1.simpleDayField), { fields: { month: { required: true } } });
            const data = { component: '00/01/2024' };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateRequiredDay_1.validateRequiredDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('requiredMonthField');
        });
    });
    it('Validating a day component that requires year will return a FieldError if year is not given', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = Object.assign(Object.assign({}, components_1.simpleDayField), { fields: { year: { required: true } } });
            const data = { component: '01/01/0000' };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateRequiredDay_1.validateRequiredDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('requiredYearField');
        });
    });
    it('Validating a day component that requires month and year will not return a FieldError if year and month are given', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = Object.assign(Object.assign({}, components_1.simpleDayField), { fields: {
                    year: { required: true },
                    month: { required: true },
                    day: { hide: true },
                } });
            const data = { component: '07/2024' };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateRequiredDay_1.validateRequiredDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component that requires day and year will not return a FieldError if year and day are given', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = Object.assign(Object.assign({}, components_1.simpleDayField), { fields: {
                    year: { required: true },
                    day: { required: true },
                    month: { hide: true },
                } });
            const data = { component: '24/2024' };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateRequiredDay_1.validateRequiredDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component that requires day and month will not return a FieldError if day and month are given', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = Object.assign(Object.assign({}, components_1.simpleDayField), { fields: {
                    month: { required: true },
                    day: { required: true },
                    year: { hide: true },
                } });
            const data = { component: '07/24' };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateRequiredDay_1.validateRequiredDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
});
