"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const lodash_1 = require("lodash");
const error_1 = require("../../../../error");
const components_1 = require("./fixtures/components");
const util_1 = require("./fixtures/util");
const validateValueProperty_1 = require("../validateValueProperty");
describe('validateValueProperty', function () {
    it('Validating a component with support for different types will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = components_1.simpleRadioField;
            const data = {
                component: 'test',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateValueProperty_1.validateValueProperty)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a select boxes component with values data source will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = components_1.simpleSelectBoxes;
            const data = {
                component: {
                    foo: false,
                    bar: false,
                    baz: false,
                    biz: false,
                },
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateValueProperty_1.validateValueProperty)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a select boxes component with url data source without options building will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = Object.assign(Object.assign({}, components_1.simpleSelectBoxes), { dataSrc: 'url', values: [], data: {
                    url: 'http://localhost:8080/numbers',
                    headers: [],
                } });
            const data = { component: { true: true } };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateValueProperty_1.validateValueProperty)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a select boxes component with url data source without options building will return error', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = Object.assign(Object.assign({}, components_1.simpleSelectBoxes), { dataSrc: 'url', values: [], data: {
                    url: 'http://localhost:8080/numbers',
                    headers: [],
                } });
            const data = { component: { true: true } };
            const context = (0, util_1.generateProcessorContext)(component, data);
            (0, lodash_1.set)(context, 'instance.options.building', true);
            const result = yield (0, validateValueProperty_1.validateValueProperty)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidValueProperty');
        });
    });
});
