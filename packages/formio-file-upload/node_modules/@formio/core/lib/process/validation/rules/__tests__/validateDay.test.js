"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const error_1 = require("../../../../error");
const components_1 = require("./fixtures/components");
const util_1 = require("./fixtures/util");
const utils_1 = require("../../../../utils");
const validateDay_1 = require("../validateDay");
describe('validateDay', function () {
    it('Validating a non-day component will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = components_1.simpleTextField;
            const data = {
                component: 'Hello, world!',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component with an invalid date string value will return a FieldError', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = components_1.simpleDayField;
            const data = {
                component: 'hello, world!',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidDay');
        });
    });
    it('Validating a day component with an valid date string value will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = components_1.simpleDayField;
            const data = {
                component: '03/23/2023',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component with an invalid Date object will return a FieldError', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = components_1.simpleDayField;
            const data = {
                component: new Date('Hello, world!'),
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidDay');
        });
    });
    it('Validating a day component with a valid Date object will return a field error', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = components_1.simpleDayField;
            const data = {
                component: new Date(),
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidDay');
        });
    });
    it('Validating a day component with hidden day field with an valid date string value will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.day.hide = true;
            const data = {
                component: '03/2023',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component with hidden day field with invalid date will return a field error', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.day.hide = true;
            const data = {
                component: '13/2023',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidDay');
        });
    });
    it('Validating a day component with hidden month field with an valid date string value will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.month.hide = true;
            const data = {
                component: '23/2023',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component with hidden month field with invalid date will return a field error', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.month.hide = true;
            const data = {
                component: '130/2023',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidDay');
        });
    });
    it('Validating a day component with hidden year field with an valid date string value will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.year.hide = true;
            const data = {
                component: '01/23',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component with hidden year field with invalid date will return a field error', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.year.hide = true;
            const data = {
                component: '13/23',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidDay');
        });
    });
    it('Validating a day component with hidden year and month fields with an valid date string value will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.year.hide = true;
            component.fields.month.hide = true;
            const data = {
                component: '23',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component with hidden year and month fields with invalid date will return a field error', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.year.hide = true;
            component.fields.month.hide = true;
            const data = {
                component: '123',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidDay');
        });
    });
    it('Validating a day component with hidden year and day fields with an valid date string value will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.year.hide = true;
            component.fields.day.hide = true;
            const data = {
                component: '10',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component with hidden year and day fields with invalid date will return a field error', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.year.hide = true;
            component.fields.day.hide = true;
            const data = {
                component: '22',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidDay');
        });
    });
    it('Validating a day component with hidden day and month fields with an valid date string value will return null', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.month.hide = true;
            component.fields.day.hide = true;
            const data = {
                component: '2024',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.equal(null);
        });
    });
    it('Validating a day component with hidden day and month fields with invalid date will return a field error', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const component = (0, utils_1.fastCloneDeep)(components_1.simpleDayField);
            component.fields.month.hide = true;
            component.fields.day.hide = true;
            const data = {
                component: '100042',
            };
            const context = (0, util_1.generateProcessorContext)(component, data);
            const result = yield (0, validateDay_1.validateDay)(context);
            (0, chai_1.expect)(result).to.be.instanceOf(error_1.FieldError);
            (0, chai_1.expect)(result === null || result === void 0 ? void 0 : result.errorKeyOrMessage).to.equal('invalidDay');
        });
    });
});
