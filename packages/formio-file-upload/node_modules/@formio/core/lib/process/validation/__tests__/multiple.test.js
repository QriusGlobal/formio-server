"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const validateRegexPattern_1 = require("../rules/validateRegexPattern");
const validateRequired_1 = require("../rules/validateRequired");
const textFieldComponent = {
    type: 'textfield',
    key: 'multiple_textfield',
    label: 'Multiple Textfield',
    input: true,
    multiple: true,
    validate: {
        required: true,
        maxLength: 10,
        minLength: 5,
        pattern: '^[0-9]+$',
    },
};
const selectComponent = {
    type: 'select',
    key: 'multiple_select',
    label: 'Multiple Select',
    widget: 'choicesjs',
    input: true,
    multiple: true,
    data: {
        values: [
            {
                label: 'A',
                value: 'a',
            },
            {
                label: 'B',
                value: 'b',
            },
            {
                label: 'C',
                value: 'c',
            },
        ],
    },
    validate: {
        required: true,
    },
};
const context = {
    component: textFieldComponent,
    value: [],
    path: 'multiple_textfield',
    data: { multiple_textfield: [] },
    row: { multiple_textfield: [] },
    scope: { errors: [] },
};
const contextWithSelectComponent = {
    component: selectComponent,
    value: [],
    path: 'multiple_select',
    data: { multiple_select: [] },
    row: { multiple_select: [] },
    scope: { errors: [] },
};
describe('Multiple values', function () {
    it('Validating required rule will work for multiple values component with no rows', function () {
        return __awaiter(this, void 0, void 0, function* () {
            // TextField
            const shouldValidateRequiredTextField = (0, validateRequired_1.shouldValidate)(context);
            (0, chai_1.expect)(shouldValidateRequiredTextField).to.be.equal(true);
            // Select
            const shouldValidateRequiredSelect = (0, validateRequired_1.shouldValidate)(contextWithSelectComponent);
            (0, chai_1.expect)(shouldValidateRequiredSelect).to.be.equal(true);
        });
    });
    it("Validate RegexPattern rule won't execute for multiple values component with no rows", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const shouldValidateRegexRule = (0, validateRegexPattern_1.shouldValidate)(context);
            (0, chai_1.expect)(shouldValidateRegexRule).to.be.equal(false);
            const contextWithValues = Object.assign(Object.assign({}, context), { value: 'a', data: {
                    multiple_textfield: ['a'],
                }, row: {
                    multiple_textfield: ['a'],
                } });
            const shouldValidateRegexRuleWithValues = (0, validateRegexPattern_1.shouldValidate)(contextWithValues);
            (0, chai_1.expect)(shouldValidateRegexRuleWithValues).to.be.equal(true);
        });
    });
});
