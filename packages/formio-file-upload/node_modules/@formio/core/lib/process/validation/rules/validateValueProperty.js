"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateValuePropertyInfo = exports.validateValuePropertySync = exports.validateValueProperty = exports.shouldValidate = void 0;
const error_1 = require("../../../error");
const isValidatableListComponent = (comp) => {
    return comp && comp.type && comp.type === 'selectboxes';
};
const shouldValidate = (context) => {
    var _a;
    const { component, instance } = context;
    if (!isValidatableListComponent(component)) {
        return false;
    }
    if (component.dataSrc !== 'url') {
        return false;
    }
    if ((_a = instance === null || instance === void 0 ? void 0 : instance.options) === null || _a === void 0 ? void 0 : _a.building) {
        return true;
    }
    return false;
};
exports.shouldValidate = shouldValidate;
const validateValueProperty = (context) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, exports.validateValuePropertySync)(context);
});
exports.validateValueProperty = validateValueProperty;
const validateValuePropertySync = (context) => {
    var _a;
    const { value, instance } = context;
    if (!(0, exports.shouldValidate)(context)) {
        return null;
    }
    const error = new error_1.FieldError('invalidValueProperty', context);
    if (Object.entries(value).some(([key, value]) => value && (key === '[object Object]' || key === 'true' || key === 'false')) ||
        (instance && ((_a = instance.loadedOptions) === null || _a === void 0 ? void 0 : _a.some((option) => option.invalid)))) {
        return error;
    }
    return null;
};
exports.validateValuePropertySync = validateValuePropertySync;
exports.validateValuePropertyInfo = {
    name: 'validateValueProperty',
    process: exports.validateValueProperty,
    processSync: exports.validateValuePropertySync,
    shouldProcess: exports.shouldValidate,
};
