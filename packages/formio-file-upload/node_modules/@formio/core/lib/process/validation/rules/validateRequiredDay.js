"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateRequiredDayInfo = exports.validateRequiredDaySync = exports.validateRequiredDay = exports.shouldValidate = void 0;
const error_1 = require("../../../error");
const isValidatableDayComponent = (component) => {
    var _a, _b, _c, _d, _e, _f;
    return (component &&
        component.type === 'day' &&
        (((_b = (_a = component.fields) === null || _a === void 0 ? void 0 : _a.day) === null || _b === void 0 ? void 0 : _b.required) ||
            ((_d = (_c = component.fields) === null || _c === void 0 ? void 0 : _c.month) === null || _d === void 0 ? void 0 : _d.required) ||
            ((_f = (_e = component.fields) === null || _e === void 0 ? void 0 : _e.year) === null || _f === void 0 ? void 0 : _f.required)));
};
const shouldValidate = (context) => {
    const { component } = context;
    return isValidatableDayComponent(component);
};
exports.shouldValidate = shouldValidate;
const validateRequiredDay = (context) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, exports.validateRequiredDaySync)(context);
});
exports.validateRequiredDay = validateRequiredDay;
const validateRequiredDaySync = (context) => {
    var _a, _b, _c, _d, _e, _f;
    const { component, value } = context;
    if (!(0, exports.shouldValidate)(context)) {
        return null;
    }
    if (!isValidatableDayComponent(component)) {
        return null;
    }
    if (!value) {
        return new error_1.FieldError('requiredDayEmpty', context, 'day');
    }
    if (typeof value !== 'string') {
        throw new error_1.ProcessorError(`Cannot validate required day field of ${value} because it is not a string`, context, 'validate:validateRequiredDay');
    }
    let [DAY, MONTH, YEAR] = component.dayFirst ? [0, 1, 2] : [1, 0, 2];
    const values = value.split('/').map((x) => parseInt(x, 10));
    let day = values[DAY];
    let month = values[MONTH];
    let year = values[YEAR];
    if (values.length !== 3) {
        if (component.fields.day.hide) {
            MONTH = MONTH === 0 ? 0 : MONTH - 1;
            YEAR = YEAR - 1;
            day = 0;
            month = values[MONTH];
            year = values[YEAR];
        }
        if (component.fields.month.hide) {
            DAY = DAY === 0 ? 0 : DAY - 1;
            YEAR = YEAR - 1;
            day = component.fields.day.hide && day === 0 ? 0 : values[DAY];
            month = 0;
            year = values[YEAR];
        }
        if (component.fields.year.hide) {
            day = component.fields.day.hide && day === 0 ? 0 : values[DAY];
            month = component.fields.month.hide && month === 0 ? 0 : values[MONTH];
            year = 0;
        }
    }
    if (!day && ((_b = (_a = component.fields) === null || _a === void 0 ? void 0 : _a.day) === null || _b === void 0 ? void 0 : _b.required)) {
        return new error_1.FieldError('requiredDayField', context, 'day');
    }
    if (!month && ((_d = (_c = component.fields) === null || _c === void 0 ? void 0 : _c.month) === null || _d === void 0 ? void 0 : _d.required)) {
        return new error_1.FieldError('requiredMonthField', context, 'day');
    }
    if (!year && ((_f = (_e = component.fields) === null || _e === void 0 ? void 0 : _e.year) === null || _f === void 0 ? void 0 : _f.required)) {
        return new error_1.FieldError('requiredYearField', context, 'day');
    }
    return null;
};
exports.validateRequiredDaySync = validateRequiredDaySync;
exports.validateRequiredDayInfo = {
    name: 'validateRequiredDay',
    process: exports.validateRequiredDay,
    processSync: exports.validateRequiredDaySync,
    shouldProcess: exports.shouldValidate,
};
