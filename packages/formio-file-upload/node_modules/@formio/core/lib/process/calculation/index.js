"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateProcessInfo = exports.calculateProcess = exports.calculateProcessSync = exports.shouldCalculate = void 0;
const lodash_1 = require("lodash");
const utils_1 = require("../../utils");
const shouldCalculate = (context) => {
    const { component, config, value, parent } = context;
    if (!component.calculateValue || ((config === null || config === void 0 ? void 0 : config.server) && !component.calculateServer)) {
        return false;
    }
    if ((0, lodash_1.isUndefined)(value) && (parent === null || parent === void 0 ? void 0 : parent.modelType) === 'nestedArray') {
        return false;
    }
    return true;
};
exports.shouldCalculate = shouldCalculate;
const calculateProcessSync = (context) => {
    var _a;
    const { component, data, scope, path, value } = context;
    if (!(0, exports.shouldCalculate)(context) || !component.calculateValue) {
        return;
    }
    const calculationContext = scope.fetched
        ? Object.assign(Object.assign({}, context), { data: Object.assign(Object.assign({}, data), scope.fetched) }) : context;
    if (!scope.calculated)
        scope.calculated = [];
    const newValue = (0, utils_1.evaluate)(component.calculateValue, calculationContext, 'value', false, (context) => {
        context.value = value || null;
    });
    // Only set a new value if it is not "null" which would be the case if no calculation occurred.
    if (newValue !== null) {
        scope.calculated.push({
            path,
            value: newValue,
        });
        (0, lodash_1.set)(data, path, newValue);
        if (!scope.filter)
            scope.filter = {};
        if (!((_a = scope.clearHidden) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(path))) {
            scope.filter[path] = true;
        }
    }
    return;
};
exports.calculateProcessSync = calculateProcessSync;
const calculateProcess = (context) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, exports.calculateProcessSync)(context);
});
exports.calculateProcess = calculateProcess;
exports.calculateProcessInfo = {
    name: 'calculate',
    process: exports.calculateProcess,
    processSync: exports.calculateProcessSync,
    shouldProcess: exports.shouldCalculate,
};
