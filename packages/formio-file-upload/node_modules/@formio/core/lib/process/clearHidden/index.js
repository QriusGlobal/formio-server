"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearHiddenProcessInfo = exports.clearHiddenProcess = exports.clearHiddenProcessSync = void 0;
const lodash_1 = require("lodash");
const formUtil_1 = require("../../utils/formUtil");
/**
 * This processor function checks components for the `hidden` property and unsets corresponding data
 */
const clearHiddenProcessSync = (context) => {
    var _a, _b, _c, _d;
    const { component, data, value, scope, path, parent } = context;
    // Check if there's a conditional set for the component and if it's marked as conditionally hidden
    const isConditionallyHidden = ((_a = parent === null || parent === void 0 ? void 0 : parent.scope) === null || _a === void 0 ? void 0 : _a.conditionallyHidden) ||
        ((_b = scope.conditionals) === null || _b === void 0 ? void 0 : _b.find((cond) => {
            return path === cond.path && cond.conditionallyHidden;
        }));
    if (isConditionallyHidden) {
        (0, formUtil_1.setComponentScope)(component, 'conditionallyHidden', true);
    }
    if (((_c = parent === null || parent === void 0 ? void 0 : parent.scope) === null || _c === void 0 ? void 0 : _c.intentionallyHidden) ||
        (component.hasOwnProperty('hidden') && !!component.hidden)) {
        (0, formUtil_1.setComponentScope)(component, 'intentionallyHidden', true);
    }
    const compModel = (0, formUtil_1.getModelType)(component);
    // No need to unset the value if it's undefined or is a non-data component.
    if (value === undefined || !component.type || compModel === 'none' || compModel === 'content') {
        return;
    }
    const shouldClearValueWhenHidden = !component.hasOwnProperty('clearOnHide') || component.clearOnHide;
    if (shouldClearValueWhenHidden &&
        (isConditionallyHidden || ((_d = component.scope) === null || _d === void 0 ? void 0 : _d.conditionallyHidden))) {
        (0, lodash_1.unset)(data, path);
        if (!scope.clearHidden)
            scope.clearHidden = {};
        scope.clearHidden[path] = true;
        // Make sure the filter does not include the value back.
        if (!scope.filter)
            scope.filter = {};
        scope.filter[path] = false;
    }
};
exports.clearHiddenProcessSync = clearHiddenProcessSync;
const clearHiddenProcess = (context) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, exports.clearHiddenProcessSync)(context);
});
exports.clearHiddenProcess = clearHiddenProcess;
exports.clearHiddenProcessInfo = {
    name: 'clearHidden',
    shouldProcess: () => true,
    process: exports.clearHiddenProcess,
    processSync: exports.clearHiddenProcessSync,
};
