export * from "./utils";
export * from "./formUtils";
export default FormioUtils;
declare const FormioUtils: {
    Evaluator: DefaultEvaluator;
    interpolate: typeof interpolate;
    ConditionOperators: {
        [x: string]: typeof import("./conditionOperators/IsEqualTo").default | typeof import("./conditionOperators/DateGreaterThan").default;
    };
    _: any;
    moment: typeof moment;
    flattenComponents: typeof import("@formio/core/lib/utils/formUtil").flattenComponents;
    guid: typeof import("@formio/core/lib/utils/formUtil").guid;
    uniqueName: typeof import("@formio/core/lib/utils/formUtil").uniqueName;
    MODEL_TYPES_OF_KNOWN_COMPONENTS: {
        nestedArray: string[];
        nestedDataArray: string[];
        dataObject: string[];
        object: string[];
        map: string[];
        content: string[];
        string: string[];
        number: string[];
        boolean: string[];
        none: string[];
        any: string[];
    };
    getModelType: typeof import("@formio/core/lib/utils/formUtil").getModelType;
    getComponentPath: any;
    setComponentScope: typeof import("@formio/core/lib/utils/formUtil").setComponentScope;
    resetComponentScope: typeof import("@formio/core/lib/utils/formUtil").resetComponentScope;
    isComponentNestedDataType: typeof import("@formio/core/lib/utils/formUtil").isComponentNestedDataType;
    componentPath: typeof import("@formio/core/lib/utils/formUtil").componentPath;
    getComponentPaths: typeof import("@formio/core/lib/utils/formUtil").getComponentPaths;
    componentMatches: typeof import("@formio/core/lib/utils/formUtil").componentMatches;
    getBestMatch: typeof import("@formio/core/lib/utils/formUtil").getBestMatch;
    getComponentFromPath: typeof import("@formio/core/lib/utils/formUtil").getComponentFromPath;
    getComponentValue: typeof import("@formio/core/lib/utils/formUtil").getComponentValue;
    findComponents: typeof import("@formio/core/lib/utils/formUtil").findComponents;
    eachComponentDataAsync: (components: import("@formio/core").Component[], data: import("@formio/core").DataObject, fn: import("@formio/core").EachComponentDataAsyncCallback, includeAll?: boolean | undefined, local?: boolean | undefined, parent?: import("@formio/core").Component | undefined, parentPaths?: import("@formio/core").ComponentPaths | undefined, noScopeReset?: boolean | undefined, afterFn?: import("@formio/core").EachComponentDataAsyncCallback | undefined) => Promise<void>;
    eachComponentData: (components: import("@formio/core").Component[], data: import("@formio/core").DataObject, fn: import("@formio/core").EachComponentDataCallback, includeAll?: boolean | undefined, local?: boolean | undefined, parent?: import("@formio/core").Component | undefined, parentPaths?: import("@formio/core").ComponentPaths | undefined, noScopeReset?: boolean | undefined, afterFn?: import("@formio/core").EachComponentDataCallback | undefined) => void;
    getComponentKey: typeof import("@formio/core/lib/utils/formUtil").getComponentKey;
    getContextualRowPath: any;
    getContextualRowData: typeof import("@formio/core/lib/utils/formUtil").getContextualRowData;
    componentInfo: typeof import("@formio/core/lib/utils/formUtil").componentInfo;
    eachComponent: typeof import("@formio/core/lib/utils/formUtil").eachComponent;
    eachComponentAsync: typeof import("@formio/core/lib/utils/formUtil").eachComponentAsync;
    getComponentData: typeof import("@formio/core/lib/utils/formUtil").getComponentData;
    getComponentActualValue: any;
    isLayoutComponent: typeof import("@formio/core/lib/utils/formUtil").isLayoutComponent;
    matchComponent: typeof import("@formio/core/lib/utils/formUtil").matchComponent;
    getComponent: typeof import("@formio/core/lib/utils/formUtil").getComponent;
    searchComponents: typeof import("@formio/core/lib/utils/formUtil").searchComponents;
    removeComponent: typeof import("@formio/core/lib/utils/formUtil").removeComponent;
    hasCondition: typeof import("@formio/core/lib/utils/formUtil").hasCondition;
    parseFloatExt: typeof import("@formio/core/lib/utils/formUtil").parseFloatExt;
    formatAsCurrency: typeof import("@formio/core/lib/utils/formUtil").formatAsCurrency;
    escapeRegExCharacters: typeof import("@formio/core/lib/utils/formUtil").escapeRegExCharacters;
    getValue: typeof import("@formio/core/lib/utils/formUtil").getValue;
    getStrings: typeof import("@formio/core/lib/utils/formUtil").getStrings;
    generateFormChange: typeof import("@formio/core/lib/utils/formUtil").generateFormChange;
    applyFormChanges: typeof import("@formio/core/lib/utils/formUtil").applyFormChanges;
    findComponent: typeof import("@formio/core/lib/utils/formUtil").findComponent;
    getEmptyValue: typeof import("@formio/core/lib/utils/formUtil").getEmptyValue;
    isComponentDataEmpty: typeof import("@formio/core/lib/utils/formUtil").isComponentDataEmpty;
    isSelectResourceWithObjectValue: typeof import("@formio/core/lib/utils/formUtil").isSelectResourceWithObjectValue;
    compareSelectResourceWithObjectTypeValues: typeof import("@formio/core/lib/utils/formUtil").compareSelectResourceWithObjectTypeValues;
    getItemTemplateKeys: typeof import("@formio/core/lib/utils/formUtil").getItemTemplateKeys;
    evaluate(func: string | object | Function, args: any, ret: string, interpolate: boolean, options?: import("@formio/core").EvaluatorOptions): any;
    getRandomComponentId(): string;
    getPropertyValue(style: CSSStyleDeclaration, prop: string): number;
    getElementRect(element: HTMLElement): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    getScriptPlugin(property: string): any;
    boolValue(value: string | boolean): boolean;
    isMongoId(text: string): boolean;
    checkCalculated(component: import("@formio/core").Component, submission: import("@formio/core").Submission, rowData: any): void;
    checkSimpleConditional(component: any, condition: any, row: any, data: any, instance: any): boolean;
    checkCustomConditional(component: import("@formio/core").Component, custom: string, row: any, data: any, form: import("@formio/core").Form, variable: string, onError: any, instance: any): any;
    checkJsonConditional(component: import("@formio/core").Component, json: import("@formio/core").JSONConditional, row: any, data: any, form: import("@formio/core").Form, onError: any): boolean;
    checkCondition(component: import("@formio/core").Component, row: any, data: any, form: import("@formio/core").Form, instance: any): boolean;
    checkTrigger(component: import("@formio/core").Component, trigger: any, row: import("@formio/core").DataObject, data: import("@formio/core").DataObject, form: import("@formio/core").Form, instance: any): boolean;
    setActionProperty(component: import("@formio/core").Component, action: any, result: string, row: import("@formio/core").DataObject, data: import("@formio/core").DataObject, instance: any): import("@formio/core").Component;
    removeHTML(str: string): string;
    unescapeHTML(str: string): string;
    convertStringToHTMLElement(str: string, selector: string): HTMLElement;
    getDateSetting(date: string | Date): Date | null;
    isValidDate(date: string | Date): boolean;
    currentTimezone(): string;
    offsetDate(date: Date, timezone: string): Date;
    zonesLoaded(): boolean;
    shouldLoadZones(timezone: string): boolean;
    loadZones(url: string, timezone: string): any;
    momentDate(value: string | Date, format: string, timezone: string, options: object): Date;
    formatDate(timezonesUrl: string, value: string | Date, format: string, timezone: string, flatPickrInputFormat: string): string;
    formatOffset(timezonesUrl: string, formatFn: Function, date: string | Date, format: string, timezone: string): string;
    getLocaleDateFormatInfo(locale: Intl.LocalesArgument): object;
    convertFormatToFlatpickr(format: string): string;
    convertFormatToMoment(format: string): string;
    convertFormatToMask(format: string): string;
    getInputMask(mask: string, placeholderChar: string): any[];
    unmaskValue(value: string, mask: string, placeholderChar: string): string;
    matchInputMask(value: string, inputMask: string): boolean;
    getNumberSeparators(lang?: string): {
        delimiter: string;
        decimalSeparator: string;
    };
    getNumberDecimalLimit(component: import("@formio/core").Component, defaultLimit: number): number;
    getCurrencyAffixes({ currency, decimalLimit, decimalSeparator, lang, }: {
        currency: string;
        decimalLimit: number;
        decimalSeparator: string;
        lang: string;
    }): {
        prefix: string;
        suffix: string;
    };
    fieldData(data: import("@formio/core").DataObject, component: import("@formio/core").Component): any;
    delay(fn: Function, delay?: number, ...args: any[]): any;
    iterateKey(key: string): string;
    uniqueKey(map: Record<string, string>, base: string): string;
    bootstrapVersion(options: {
        bootstrap: string;
    }): number;
    unfold(e: any): any;
    withSwitch(a: any, b: any): Functions[];
    observeOverload(callback: Function, options?: {
        limit: number;
        delay: number;
    }): Function;
    getContextComponents(context: any, excludeNested: boolean, excludedTypes?: string[]): any[];
    getContextButtons(context: any): any[];
    translateHTMLTemplate(template: string, translate: Function): string;
    sanitize(string: string, options: any): string;
    fastCloneDeep(obj: any): any;
    isInputComponent(componentJson: import("@formio/core").Component): boolean;
    getArrayFromComponentPath(pathStr: string): string[];
    isChildOf(child: any, parent: any): boolean;
    getStringFromComponentPath(path: number[]): string;
    round(number: number, precision: number): string;
    getIEBrowserVersion(): number | null;
    getBrowserInfo(): object;
    getComponentPathWithoutIndicies(path?: string): string;
    getDataParentComponent(componentInstance: Component): any;
    isPromise(value: any): boolean;
    getFocusableElements(element: HTMLElement): NodeList<HTMLElement>;
    getComponentSavedTypes(fullSchema: import("@formio/core").Component): string[] | null;
    firstNonNil: any;
    componentValueTypes: {
        number: string;
        string: string;
        boolean: string;
        array: string;
        object: string;
        date: string;
        any: string;
    };
    interpolateErrors: (component: Component, errors: FieldError[], interpolateFn: Function) => [];
};
import { Evaluator } from './Evaluator';
import { registerEvaluator } from './Evaluator';
import { DefaultEvaluator } from './Evaluator';
import { interpolate } from './Evaluator';
import moment from 'moment';
export { FormioUtils as Utils, Evaluator, registerEvaluator, DefaultEvaluator };
