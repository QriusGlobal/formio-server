/**
 * For backwards compatibility we a standalone interpolate function. This merely calls the
 * global mutable Evaluator instance's interpolate function.
 * @param  {...any} args - interpolate arguments, typically "rawTemplate", "data", and "options"
 * @returns {any} the interpolation result.
 */
export function interpolate(...args: any[]): any;
/**
 * Set the evaluator to use for evaluating expressions.
 * @param {CoreEvaluator} override - The new evaluator instance to use.
 * @returns {void}
 */
export function registerEvaluator(override: CoreEvaluator): void;
export class DefaultEvaluator extends CoreEvaluator {
    cache: {};
    protectedEval: boolean;
    template(template: any, hash: any): any;
    interpolate(rawTemplate: any, data: any, _options: any): any;
}
export let Evaluator: DefaultEvaluator;
import { DefaultEvaluator as CoreEvaluator } from '@formio/core';
