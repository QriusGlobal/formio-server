name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      gcs-emulator:
        image: fsouza/fake-gcs-server
        ports:
          - 4443:4443
        options: >-
          --health-cmd "curl -f http://localhost:4443/storage/v1/b || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start Form.io server
        run: |
          npm run formio:start &
          npx wait-on http://localhost:3001/health --timeout 60000

      - name: Build frontend
        run: npm run build

      - name: Start frontend server
        run: |
          npm run preview &
          npx wait-on http://localhost:5173 --timeout 60000

      - name: Run E2E tests
        run: npm run test:e2e -- --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/3
        env:
          GCS_EMULATOR_HOST: http://localhost:4443
          FORMIO_API_URL: http://localhost:3001
          BASE_URL: http://localhost:5173

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}-shard-${{ matrix.shard }}
          path: |
            reports/
            test-results/
          retention-days: 30

      - name: Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.browser }}-shard-${{ matrix.shard }}
          path: reports/screenshots/
          retention-days: 7

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build and start services
        run: |
          npm run build
          npm run preview &
          npx wait-on http://localhost:5173 --timeout 60000

      - name: Run visual regression tests
        run: npm run test:visual
        env:
          BASE_URL: http://localhost:5173

      - name: Upload visual diffs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-diffs
          path: reports/visual-diffs/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      gcs-emulator:
        image: fsouza/fake-gcs-server
        ports:
          - 4443:4443

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration
        env:
          GCS_EMULATOR_HOST: http://localhost:4443
          FORMIO_API_URL: http://localhost:3001

      - name: Upload integration reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-reports
          path: reports/integration/
          retention-days: 30

  report-aggregation:
    name: Aggregate Reports
    runs-on: ubuntu-latest
    needs: [e2e-tests, visual-regression, integration-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-reports

      - name: Aggregate reports
        run: |
          echo "Aggregating test reports..."
          # This would use a custom script to merge reports

      - name: Upload combined report
        uses: actions/upload-artifact@v4
        with:
          name: combined-test-report
          path: combined-report/
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'combined-report/summary.json';

            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

              const comment = `
              ## Test Results Summary

              - **E2E Tests**: ${report.e2e.passed}/${report.e2e.total} passed
              - **Visual Tests**: ${report.visual.diffs} differences found
              - **Integration Tests**: ${report.integration.passed}/${report.integration.total} passed

              [View detailed report](${report.reportUrl})
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }